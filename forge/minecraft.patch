diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/Block.java ../src_work/minecraft/net/minecraft/src/Block.java
--- ../src_base/minecraft/net/minecraft/src/Block.java	2021-01-03 20:24:39.956956000 -0500
+++ ../src_work/minecraft/net/minecraft/src/Block.java	2021-01-03 20:54:41.961114800 -0500
@@ -3,6 +3,8 @@
 // Decompiler options: packimports(3) braces deadcode 
 
 package net.minecraft.src;
+import net.minecraft.src.forge.ForgeHooks;
+import net.minecraft.src.reforged.Reforged;
 
 import java.util.ArrayList;
 import java.util.Random;
@@ -43,11 +45,17 @@
         stepSound = soundPowderFootstep;
         blockParticleGravity = 1.0F;
         slipperiness = 0.6F;
-        if(blocksList[i] != null)
-        {
-            throw new IllegalArgumentException((new StringBuilder()).append("Slot ").append(i).append(" is already occupied by ").append(blocksList[i]).append(" when adding ").append(this).toString());
-        } else
-        {
+        
+        if(Reforged.hasIDResolver()) {
+        	if(blocksList[i] != null || IDResolver.HasStoredID(i, true))
+            {
+                int j = IDResolver.GetConflictedBlockID(i, this);
+                if(j == -1)
+                {
+                    throw new IllegalArgumentException((new StringBuilder()).append("Slot ").append(i).append(" is already occupied by ").append(blocksList[i]).append(" when adding ").append(this).toString());
+                }
+                i = j;
+            }
             blockMaterial = material;
             blocksList[i] = this;
             blockID = i;
@@ -56,8 +64,27 @@
             lightOpacity[i] = isOpaqueCube() ? 255 : 0;
             canBlockGrass[i] = !material.getCanBlockGrass();
             isBlockContainer[i] = false;
-            return;
-        }
+        } else {
+	        if(blocksList[i] != null)
+	        {
+	            throw new IllegalArgumentException((new StringBuilder()).append("Slot ").append(i).append(" is already occupied by ").append(blocksList[i]).append(" when adding ").append(this).toString());
+	        } else
+	        {
+	            blockMaterial = material;
+	            blocksList[i] = this;
+	            blockID = i;
+	            setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+	            opaqueCubeLookup[i] = isOpaqueCube();
+	            lightOpacity[i] = isOpaqueCube() ? 255 : 0;
+	            canBlockGrass[i] = !material.getCanBlockGrass();
+	            isBlockContainer[i] = false;
+	            return;
+	        }
+        }
+    }
+    
+    public static void touch() {
+    	
     }
 
     protected Block disableNeighborNotifyOnMetadataChange()
@@ -270,25 +297,23 @@
     {
         return 1;
     }
+    
+    public int quantityDropped(int i, Random random)
+    {
+        return quantityDropped(random);
+    }
 
     public int idDropped(int i, Random random)
     {
         return blockID;
     }
 
+    /* FORGE: This function isn't called by Minecraft anymore.  Use
+     * blockStrength(EntityPlayer,int) instead.
+     */
     public float blockStrength(EntityPlayer entityplayer)
     {
-        if(blockHardness < 0.0F)
-        {
-            return 0.0F;
-        }
-        if(!entityplayer.canHarvestBlock(this))
-        {
-            return 1.0F / blockHardness / 100F;
-        } else
-        {
-            return entityplayer.getCurrentPlayerStrVsBlock(this) / blockHardness / 30F;
-        }
+    	return blockStrength(entityplayer,0);
     }
 
     public final void dropBlockAsItem(World world, int i, int j, int k, int l)
@@ -302,7 +327,7 @@
         {
             return;
         }
-        int i1 = quantityDropped(world.rand);
+        int i1 = quantityDropped(l, world.rand);
         for(int j1 = 0; j1 < i1; j1++)
         {
             if(world.rand.nextFloat() > f)
@@ -600,6 +625,80 @@
         return blockMaterial.getMaterialMobility();
     }
 
+    /* FORGE: Implement and return true if you wish this block to behave
+     * like a ladder when the player is inside.
+     */
+    public boolean isLadder() {
+	return false;
+    }
+
+    /* FORGE: Return true if the block is a normal, solid cube.  This
+     * determines indirect power state, entity ejection from blocks, and a few
+     * others.
+     */
+    public boolean isBlockNormalCube(World world, int i, int j, int k) {
+	    return blockMaterial.getIsTranslucent() && renderAsNormalBlock();
+    }
+
+    /* FORGE: Return true if the block is solid on the given side.  This
+     * is used by placement logic. */
+    public boolean isBlockSolidOnSide( World world, int i, int j, int k,
+		    int side ) {
+	    return isBlockNormalCube(world,i,j,k);
+    }
+
+    /* FORGE: Return true if the player can place a new block in the block
+     * occupied by this one, like water, lava, fire, etc.
+     */
+    public boolean isBlockReplaceable( World world, int i, int j, int k ) {
+	    return false;
+    }
+
+    /* FORGE: Return true if this block should set fire and deal fire damage
+     * to entities coming into contact with it, false otherwise.
+     */
+    public boolean isBlockBurning( World world, int i, int j, int k ) {
+	    return false;
+    }
+
+    /* FORGE: Return true if this block should be treated as an air block
+     * by the rest of the code, false otherwise.  This method is primarily
+     * useful for creating pure logic-blocks that will be invisible 
+     * to the player and otherwise interact as air would.  
+     */	
+    public boolean isAirBlock( World world, int i, int j, int k ) {
+	    return false;
+    }
+
+    /* FORGE: Return the block hardness with metadata 'md'.
+     */
+    public float getHardness(int md) {
+	    return blockHardness;
+    }
+
+    /* FORGE: Return the block strength of the block at i,j,k against the
+     * player.
+     */
+    public float blockStrength(World world, EntityPlayer player,
+		    int i, int j, int k) {
+	    int md=world.getBlockMetadata(i,j,k);
+	    return blockStrength(player,md);
+    }
+
+    /* FORGE: Return the block strength of a prototypical block with metadata
+     * 'md' against the player.
+     */
+    public float blockStrength(EntityPlayer player, int md) {
+	    return ForgeHooks.blockStrength(this,player,md);
+    }
+
+    /* FORGE: Return true if the player can harvest a prototypical block with
+     * metadata 'md'.
+     */
+    public boolean canHarvestBlock(EntityPlayer player, int md) {
+	    return ForgeHooks.canHarvestBlock(this,player,md);
+    }
+
     static Class _mthclass$(String s)
     {
         try
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/BlockButton.java ../src_work/minecraft/net/minecraft/src/BlockButton.java
--- ../src_base/minecraft/net/minecraft/src/BlockButton.java	2021-01-03 20:24:39.971970000 -0500
+++ ../src_work/minecraft/net/minecraft/src/BlockButton.java	2021-01-03 20:25:19.997378400 -0500
@@ -41,36 +41,36 @@
 
     public boolean canPlaceBlockOnSide(World world, int i, int j, int k, int l)
     {
-        if(l == 2 && world.isBlockNormalCube(i, j, k + 1))
+        if(l == 2 && world.isBlockSolidOnSide(i, j, k + 1,2))
         {
             return true;
         }
-        if(l == 3 && world.isBlockNormalCube(i, j, k - 1))
+        if(l == 3 && world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             return true;
         }
-        if(l == 4 && world.isBlockNormalCube(i + 1, j, k))
+        if(l == 4 && world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             return true;
         }
-        return l == 5 && world.isBlockNormalCube(i - 1, j, k);
+        return l == 5 && world.isBlockSolidOnSide(i - 1, j, k,5);
     }
 
     public boolean canPlaceBlockAt(World world, int i, int j, int k)
     {
-        if(world.isBlockNormalCube(i - 1, j, k))
+        if(world.isBlockSolidOnSide(i - 1, j, k,5))
         {
             return true;
         }
-        if(world.isBlockNormalCube(i + 1, j, k))
+        if(world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             return true;
         }
-        if(world.isBlockNormalCube(i, j, k - 1))
+        if(world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             return true;
         }
-        return world.isBlockNormalCube(i, j, k + 1);
+        return world.isBlockSolidOnSide(i, j, k + 1,2);
     }
 
     public void onBlockPlaced(World world, int i, int j, int k, int l)
@@ -78,19 +78,19 @@
         int i1 = world.getBlockMetadata(i, j, k);
         int j1 = i1 & 8;
         i1 &= 7;
-        if(l == 2 && world.isBlockNormalCube(i, j, k + 1))
+        if(l == 2 && world.isBlockSolidOnSide(i, j, k + 1,2))
         {
             i1 = 4;
         } else
-        if(l == 3 && world.isBlockNormalCube(i, j, k - 1))
+        if(l == 3 && world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             i1 = 3;
         } else
-        if(l == 4 && world.isBlockNormalCube(i + 1, j, k))
+        if(l == 4 && world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             i1 = 2;
         } else
-        if(l == 5 && world.isBlockNormalCube(i - 1, j, k))
+        if(l == 5 && world.isBlockSolidOnSide(i - 1, j, k,5))
         {
             i1 = 1;
         } else
@@ -102,19 +102,19 @@
 
     private int getOrientation(World world, int i, int j, int k)
     {
-        if(world.isBlockNormalCube(i - 1, j, k))
+        if(world.isBlockSolidOnSide(i - 1, j, k,5))
         {
             return 1;
         }
-        if(world.isBlockNormalCube(i + 1, j, k))
+        if(world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             return 2;
         }
-        if(world.isBlockNormalCube(i, j, k - 1))
+        if(world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             return 3;
         }
-        return !world.isBlockNormalCube(i, j, k + 1) ? 1 : 4;
+        return !world.isBlockSolidOnSide(i, j, k + 1,2) ? 1 : 4;
     }
 
     public void onNeighborBlockChange(World world, int i, int j, int k, int l)
@@ -123,19 +123,19 @@
         {
             int i1 = world.getBlockMetadata(i, j, k) & 7;
             boolean flag = false;
-            if(!world.isBlockNormalCube(i - 1, j, k) && i1 == 1)
+            if(!world.isBlockSolidOnSide(i - 1, j, k,5) && i1 == 1)
             {
                 flag = true;
             }
-            if(!world.isBlockNormalCube(i + 1, j, k) && i1 == 2)
+            if(!world.isBlockSolidOnSide(i + 1, j, k,4) && i1 == 2)
             {
                 flag = true;
             }
-            if(!world.isBlockNormalCube(i, j, k - 1) && i1 == 3)
+            if(!world.isBlockSolidOnSide(i, j, k - 1,3) && i1 == 3)
             {
                 flag = true;
             }
-            if(!world.isBlockNormalCube(i, j, k + 1) && i1 == 4)
+            if(!world.isBlockSolidOnSide(i, j, k + 1,2) && i1 == 4)
             {
                 flag = true;
             }
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/BlockChest.java ../src_work/minecraft/net/minecraft/src/BlockChest.java
--- ../src_base/minecraft/net/minecraft/src/BlockChest.java	2021-01-03 20:24:39.983479000 -0500
+++ ../src_work/minecraft/net/minecraft/src/BlockChest.java	2021-01-03 20:25:19.999880500 -0500
@@ -230,23 +230,23 @@
     public boolean blockActivated(World world, int i, int j, int k, EntityPlayer entityplayer)
     {
         Object obj = (TileEntityChest)world.getBlockTileEntity(i, j, k);
-        if(world.isBlockNormalCube(i, j + 1, k))
+        if(world.isBlockSolidOnSide(i, j + 1, k,0))
         {
             return true;
         }
-        if(world.getBlockId(i - 1, j, k) == blockID && world.isBlockNormalCube(i - 1, j + 1, k))
+        if(world.getBlockId(i - 1, j, k) == blockID && world.isBlockSolidOnSide(i - 1, j + 1, k,0))
         {
             return true;
         }
-        if(world.getBlockId(i + 1, j, k) == blockID && world.isBlockNormalCube(i + 1, j + 1, k))
+        if(world.getBlockId(i + 1, j, k) == blockID && world.isBlockSolidOnSide(i + 1, j + 1, k,0))
         {
             return true;
         }
-        if(world.getBlockId(i, j, k - 1) == blockID && world.isBlockNormalCube(i, j + 1, k - 1))
+        if(world.getBlockId(i, j, k - 1) == blockID && world.isBlockSolidOnSide(i, j + 1, k - 1,0))
         {
             return true;
         }
-        if(world.getBlockId(i, j, k + 1) == blockID && world.isBlockNormalCube(i, j + 1, k + 1))
+        if(world.getBlockId(i, j, k + 1) == blockID && world.isBlockSolidOnSide(i, j + 1, k + 1,0))
         {
             return true;
         }
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/BlockDoor.java ../src_work/minecraft/net/minecraft/src/BlockDoor.java
--- ../src_base/minecraft/net/minecraft/src/BlockDoor.java	2021-01-03 20:24:40.013505000 -0500
+++ ../src_work/minecraft/net/minecraft/src/BlockDoor.java	2021-01-03 20:25:20.002381800 -0500
@@ -178,7 +178,7 @@
                 world.setBlockWithNotify(i, j, k, 0);
                 flag = true;
             }
-            if(!world.isBlockNormalCube(i, j - 1, k))
+            if(!world.isBlockSolidOnSide(i, j - 1, k,1))
             {
                 world.setBlockWithNotify(i, j, k, 0);
                 flag = true;
@@ -241,7 +241,7 @@
             return false;
         } else
         {
-            return world.isBlockNormalCube(i, j - 1, k) && super.canPlaceBlockAt(world, i, j, k) && super.canPlaceBlockAt(world, i, j + 1, k);
+            return world.isBlockSolidOnSide(i, j - 1, k,1) && super.canPlaceBlockAt(world, i, j, k) && super.canPlaceBlockAt(world, i, j + 1, k);
         }
     }
 
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/BlockLadder.java ../src_work/minecraft/net/minecraft/src/BlockLadder.java
--- ../src_base/minecraft/net/minecraft/src/BlockLadder.java	2021-01-03 20:24:40.064049000 -0500
+++ ../src_work/minecraft/net/minecraft/src/BlockLadder.java	2021-01-03 20:25:20.005384800 -0500
@@ -63,6 +63,11 @@
         return super.getSelectedBoundingBoxFromPool(world, i, j, k);
     }
 
+    /* FORGE: Implemented base method, see Block.isLadder */
+    public boolean isLadder() {
+	return true;
+    }
+
     public boolean isOpaqueCube()
     {
         return false;
@@ -80,37 +85,37 @@
 
     public boolean canPlaceBlockAt(World world, int i, int j, int k)
     {
-        if(world.isBlockNormalCube(i - 1, j, k))
+        if(world.isBlockSolidOnSide(i - 1, j, k,5))
         {
             return true;
         }
-        if(world.isBlockNormalCube(i + 1, j, k))
+        if(world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             return true;
         }
-        if(world.isBlockNormalCube(i, j, k - 1))
+        if(world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             return true;
         }
-        return world.isBlockNormalCube(i, j, k + 1);
+        return world.isBlockSolidOnSide(i, j, k + 1,2);
     }
 
     public void onBlockPlaced(World world, int i, int j, int k, int l)
     {
         int i1 = world.getBlockMetadata(i, j, k);
-        if((i1 == 0 || l == 2) && world.isBlockNormalCube(i, j, k + 1))
+        if((i1 == 0 || l == 2) && world.isBlockSolidOnSide(i, j, k + 1,2))
         {
             i1 = 2;
         }
-        if((i1 == 0 || l == 3) && world.isBlockNormalCube(i, j, k - 1))
+        if((i1 == 0 || l == 3) && world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             i1 = 3;
         }
-        if((i1 == 0 || l == 4) && world.isBlockNormalCube(i + 1, j, k))
+        if((i1 == 0 || l == 4) && world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             i1 = 4;
         }
-        if((i1 == 0 || l == 5) && world.isBlockNormalCube(i - 1, j, k))
+        if((i1 == 0 || l == 5) && world.isBlockSolidOnSide(i - 1, j, k,5))
         {
             i1 = 5;
         }
@@ -121,19 +126,19 @@
     {
         int i1 = world.getBlockMetadata(i, j, k);
         boolean flag = false;
-        if(i1 == 2 && world.isBlockNormalCube(i, j, k + 1))
+        if(i1 == 2 && world.isBlockSolidOnSide(i, j, k + 1,2))
         {
             flag = true;
         }
-        if(i1 == 3 && world.isBlockNormalCube(i, j, k - 1))
+        if(i1 == 3 && world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             flag = true;
         }
-        if(i1 == 4 && world.isBlockNormalCube(i + 1, j, k))
+        if(i1 == 4 && world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             flag = true;
         }
-        if(i1 == 5 && world.isBlockNormalCube(i - 1, j, k))
+        if(i1 == 5 && world.isBlockSolidOnSide(i - 1, j, k,5))
         {
             flag = true;
         }
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/BlockLeaves.java ../src_work/minecraft/net/minecraft/src/BlockLeaves.java
--- ../src_base/minecraft/net/minecraft/src/BlockLeaves.java	2021-01-03 20:24:40.067551000 -0500
+++ ../src_work/minecraft/net/minecraft/src/BlockLeaves.java	2021-01-03 20:25:20.008386900 -0500
@@ -14,6 +14,8 @@
 
 public class BlockLeaves extends BlockLeavesBase
 {
+	
+	
 
     protected BlockLeaves(int i, int j)
     {
@@ -246,4 +248,4 @@
 
     private int baseIndexInPNG;
     int adjacentTreeBlocks[];
-}
+}
\ No newline at end of file
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/BlockLever.java ../src_work/minecraft/net/minecraft/src/BlockLever.java
--- ../src_base/minecraft/net/minecraft/src/BlockLever.java	2021-01-03 20:24:40.074557000 -0500
+++ ../src_work/minecraft/net/minecraft/src/BlockLever.java	2021-01-03 20:25:20.011890700 -0500
@@ -40,44 +40,44 @@
 
     public boolean canPlaceBlockOnSide(World world, int i, int j, int k, int l)
     {
-        if(l == 1 && world.isBlockNormalCube(i, j - 1, k))
+        if(l == 1 && world.isBlockSolidOnSide(i, j - 1, k,1))
         {
             return true;
         }
-        if(l == 2 && world.isBlockNormalCube(i, j, k + 1))
+        if(l == 2 && world.isBlockSolidOnSide(i, j, k + 1,2))
         {
             return true;
         }
-        if(l == 3 && world.isBlockNormalCube(i, j, k - 1))
+        if(l == 3 && world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             return true;
         }
-        if(l == 4 && world.isBlockNormalCube(i + 1, j, k))
+        if(l == 4 && world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             return true;
         }
-        return l == 5 && world.isBlockNormalCube(i - 1, j, k);
+        return l == 5 && world.isBlockSolidOnSide(i - 1, j, k,5);
     }
 
     public boolean canPlaceBlockAt(World world, int i, int j, int k)
     {
-        if(world.isBlockNormalCube(i - 1, j, k))
+        if(world.isBlockSolidOnSide(i - 1, j, k,5))
         {
             return true;
         }
-        if(world.isBlockNormalCube(i + 1, j, k))
+        if(world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             return true;
         }
-        if(world.isBlockNormalCube(i, j, k - 1))
+        if(world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             return true;
         }
-        if(world.isBlockNormalCube(i, j, k + 1))
+        if(world.isBlockSolidOnSide(i, j, k + 1,2))
         {
             return true;
         }
-        return world.isBlockNormalCube(i, j - 1, k);
+        return world.isBlockSolidOnSide(i, j - 1, k,1);
     }
 
     public void onBlockPlaced(World world, int i, int j, int k, int l)
@@ -86,23 +86,23 @@
         int j1 = i1 & 8;
         i1 &= 7;
         i1 = -1;
-        if(l == 1 && world.isBlockNormalCube(i, j - 1, k))
+        if(l == 1 && world.isBlockSolidOnSide(i, j - 1, k,1))
         {
             i1 = 5 + world.rand.nextInt(2);
         }
-        if(l == 2 && world.isBlockNormalCube(i, j, k + 1))
+        if(l == 2 && world.isBlockSolidOnSide(i, j, k + 1,2))
         {
             i1 = 4;
         }
-        if(l == 3 && world.isBlockNormalCube(i, j, k - 1))
+        if(l == 3 && world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             i1 = 3;
         }
-        if(l == 4 && world.isBlockNormalCube(i + 1, j, k))
+        if(l == 4 && world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             i1 = 2;
         }
-        if(l == 5 && world.isBlockNormalCube(i - 1, j, k))
+        if(l == 5 && world.isBlockSolidOnSide(i - 1, j, k,5))
         {
             i1 = 1;
         }
@@ -124,27 +124,27 @@
         {
             int i1 = world.getBlockMetadata(i, j, k) & 7;
             boolean flag = false;
-            if(!world.isBlockNormalCube(i - 1, j, k) && i1 == 1)
+            if(!world.isBlockSolidOnSide(i - 1, j, k,5) && i1 == 1)
             {
                 flag = true;
             }
-            if(!world.isBlockNormalCube(i + 1, j, k) && i1 == 2)
+            if(!world.isBlockSolidOnSide(i + 1, j, k,4) && i1 == 2)
             {
                 flag = true;
             }
-            if(!world.isBlockNormalCube(i, j, k - 1) && i1 == 3)
+            if(!world.isBlockSolidOnSide(i, j, k - 1,3) && i1 == 3)
             {
                 flag = true;
             }
-            if(!world.isBlockNormalCube(i, j, k + 1) && i1 == 4)
+            if(!world.isBlockSolidOnSide(i, j, k + 1,2) && i1 == 4)
             {
                 flag = true;
             }
-            if(!world.isBlockNormalCube(i, j - 1, k) && i1 == 5)
+            if(!world.isBlockSolidOnSide(i, j - 1, k,1) && i1 == 5)
             {
                 flag = true;
             }
-            if(!world.isBlockNormalCube(i, j - 1, k) && i1 == 6)
+            if(!world.isBlockSolidOnSide(i, j - 1, k,1) && i1 == 6)
             {
                 flag = true;
             }
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/BlockPressurePlate.java ../src_work/minecraft/net/minecraft/src/BlockPressurePlate.java
--- ../src_base/minecraft/net/minecraft/src/BlockPressurePlate.java	2021-01-03 20:24:40.124100000 -0500
+++ ../src_work/minecraft/net/minecraft/src/BlockPressurePlate.java	2021-01-03 20:25:20.014392500 -0500
@@ -46,7 +46,7 @@
 
     public boolean canPlaceBlockAt(World world, int i, int j, int k)
     {
-        return world.isBlockNormalCube(i, j - 1, k);
+        return world.isBlockSolidOnSide(i, j - 1, k,1);
     }
 
     public void onBlockAdded(World world, int i, int j, int k)
@@ -56,7 +56,7 @@
     public void onNeighborBlockChange(World world, int i, int j, int k, int l)
     {
         boolean flag = false;
-        if(!world.isBlockNormalCube(i, j - 1, k))
+        if(!world.isBlockSolidOnSide(i, j - 1, k,1))
         {
             flag = true;
         }
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/BlockRail.java ../src_work/minecraft/net/minecraft/src/BlockRail.java
--- ../src_base/minecraft/net/minecraft/src/BlockRail.java	2021-01-03 20:24:40.133108000 -0500
+++ ../src_work/minecraft/net/minecraft/src/BlockRail.java	2021-01-03 20:25:20.017395200 -0500
@@ -16,12 +16,12 @@
     public static final boolean isRailBlockAt(World world, int i, int j, int k)
     {
         int l = world.getBlockId(i, j, k);
-        return l == Block.rail.blockID || l == Block.railPowered.blockID || l == Block.railDetector.blockID;
+	return Block.blocksList[l] instanceof BlockRail;
     }
 
     public static final boolean isRailBlock(int i)
     {
-        return i == Block.rail.blockID || i == Block.railPowered.blockID || i == Block.railDetector.blockID;
+	return Block.blocksList[i] instanceof BlockRail;
     }
 
     protected BlockRail(int i, int j, boolean flag)
@@ -97,7 +97,7 @@
 
     public boolean canPlaceBlockAt(World world, int i, int j, int k)
     {
-        return world.isBlockNormalCube(i, j - 1, k);
+        return world.isBlockSolidOnSide(i, j - 1, k,1);
     }
 
     public void onBlockAdded(World world, int i, int j, int k)
@@ -121,23 +121,23 @@
             j1 &= 7;
         }
         boolean flag = false;
-        if(!world.isBlockNormalCube(i, j - 1, k))
+        if(!world.isBlockSolidOnSide(i, j - 1, k,1))
         {
             flag = true;
         }
-        if(j1 == 2 && !world.isBlockNormalCube(i + 1, j, k))
+        if(j1 == 2 && !world.isBlockSolidOnSide(i + 1, j, k,1))
         {
             flag = true;
         }
-        if(j1 == 3 && !world.isBlockNormalCube(i - 1, j, k))
+        if(j1 == 3 && !world.isBlockSolidOnSide(i - 1, j, k,1))
         {
             flag = true;
         }
-        if(j1 == 4 && !world.isBlockNormalCube(i, j, k - 1))
+        if(j1 == 4 && !world.isBlockSolidOnSide(i, j, k - 1,1))
         {
             flag = true;
         }
-        if(j1 == 5 && !world.isBlockNormalCube(i, j, k + 1))
+        if(j1 == 5 && !world.isBlockSolidOnSide(i, j, k + 1,1))
         {
             flag = true;
         }
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/BlockRedstoneRepeater.java ../src_work/minecraft/net/minecraft/src/BlockRedstoneRepeater.java
--- ../src_base/minecraft/net/minecraft/src/BlockRedstoneRepeater.java	2021-01-03 20:24:40.140614000 -0500
+++ ../src_work/minecraft/net/minecraft/src/BlockRedstoneRepeater.java	2021-01-03 20:25:20.019898500 -0500
@@ -27,7 +27,7 @@
 
     public boolean canPlaceBlockAt(World world, int i, int j, int k)
     {
-        if(!world.isBlockNormalCube(i, j - 1, k))
+        if(!world.isBlockSolidOnSide(i, j - 1, k,1))
         {
             return false;
         } else
@@ -38,7 +38,7 @@
 
     public boolean canBlockStay(World world, int i, int j, int k)
     {
-        if(!world.isBlockNormalCube(i, j - 1, k))
+        if(!world.isBlockSolidOnSide(i, j - 1, k,1))
         {
             return false;
         } else
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/BlockRedstoneWire.java ../src_work/minecraft/net/minecraft/src/BlockRedstoneWire.java
--- ../src_base/minecraft/net/minecraft/src/BlockRedstoneWire.java	2021-01-03 20:24:40.150123000 -0500
+++ ../src_work/minecraft/net/minecraft/src/BlockRedstoneWire.java	2021-01-03 20:25:20.022401300 -0500
@@ -3,6 +3,7 @@
 // Decompiler options: packimports(3) braces deadcode 
 
 package net.minecraft.src;
+import net.minecraft.src.forge.*;
 
 import java.util.*;
 
@@ -53,7 +54,7 @@
 
     public boolean canPlaceBlockAt(World world, int i, int j, int k)
     {
-        return world.isBlockNormalCube(i, j - 1, k);
+        return world.isBlockSolidOnSide(i, j - 1, k, 1);
     }
 
     private void updateAndPropagateCurrentStrength(World world, int i, int j, int k)
@@ -451,6 +452,10 @@
         {
             return false;
         }
+        if (Block.blocksList[i1] instanceof IConnectRedstone) {
+            IConnectRedstone icr = (IConnectRedstone) Block.blocksList[i1];
+            return icr.canConnectRedstone(iblockaccess, i, j, k, l);
+        }
         if(Block.blocksList[i1].canProvidePower())
         {
             return true;
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/BlockTallGrass.java ../src_work/minecraft/net/minecraft/src/BlockTallGrass.java
--- ../src_base/minecraft/net/minecraft/src/BlockTallGrass.java	2021-01-03 20:24:40.194161000 -0500
+++ ../src_work/minecraft/net/minecraft/src/BlockTallGrass.java	2021-01-03 20:25:20.024902000 -0500
@@ -4,6 +4,7 @@
 
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import java.util.Random;
 
 // Referenced classes of package net.minecraft.src:
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/BlockTorch.java ../src_work/minecraft/net/minecraft/src/BlockTorch.java
--- ../src_base/minecraft/net/minecraft/src/BlockTorch.java	2021-01-03 20:24:40.200666000 -0500
+++ ../src_work/minecraft/net/minecraft/src/BlockTorch.java	2021-01-03 20:25:20.027404200 -0500
@@ -41,24 +41,24 @@
 
     private boolean func_31032_h(World world, int i, int j, int k)
     {
-        return world.isBlockNormalCube(i, j, k) || world.getBlockId(i, j, k) == Block.fence.blockID;
+        return world.isBlockSolidOnSide(i, j, k,1) || world.getBlockId(i, j, k) == Block.fence.blockID;
     }
 
     public boolean canPlaceBlockAt(World world, int i, int j, int k)
     {
-        if(world.isBlockNormalCube(i - 1, j, k))
+        if(world.isBlockSolidOnSide(i - 1, j, k,5))
         {
             return true;
         }
-        if(world.isBlockNormalCube(i + 1, j, k))
+        if(world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             return true;
         }
-        if(world.isBlockNormalCube(i, j, k - 1))
+        if(world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             return true;
         }
-        if(world.isBlockNormalCube(i, j, k + 1))
+        if(world.isBlockSolidOnSide(i, j, k + 1,2))
         {
             return true;
         }
@@ -72,19 +72,19 @@
         {
             i1 = 5;
         }
-        if(l == 2 && world.isBlockNormalCube(i, j, k + 1))
+        if(l == 2 && world.isBlockSolidOnSide(i, j, k + 1,2))
         {
             i1 = 4;
         }
-        if(l == 3 && world.isBlockNormalCube(i, j, k - 1))
+        if(l == 3 && world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             i1 = 3;
         }
-        if(l == 4 && world.isBlockNormalCube(i + 1, j, k))
+        if(l == 4 && world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             i1 = 2;
         }
-        if(l == 5 && world.isBlockNormalCube(i - 1, j, k))
+        if(l == 5 && world.isBlockSolidOnSide(i - 1, j, k,5))
         {
             i1 = 1;
         }
@@ -102,19 +102,19 @@
 
     public void onBlockAdded(World world, int i, int j, int k)
     {
-        if(world.isBlockNormalCube(i - 1, j, k))
+        if(world.isBlockSolidOnSide(i - 1, j, k,5))
         {
             world.setBlockMetadataWithNotify(i, j, k, 1);
         } else
-        if(world.isBlockNormalCube(i + 1, j, k))
+        if(world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             world.setBlockMetadataWithNotify(i, j, k, 2);
         } else
-        if(world.isBlockNormalCube(i, j, k - 1))
+        if(world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             world.setBlockMetadataWithNotify(i, j, k, 3);
         } else
-        if(world.isBlockNormalCube(i, j, k + 1))
+        if(world.isBlockSolidOnSide(i, j, k + 1,2))
         {
             world.setBlockMetadataWithNotify(i, j, k, 4);
         } else
@@ -131,19 +131,19 @@
         {
             int i1 = world.getBlockMetadata(i, j, k);
             boolean flag = false;
-            if(!world.isBlockNormalCube(i - 1, j, k) && i1 == 1)
+            if(!world.isBlockSolidOnSide(i - 1, j, k,5) && i1 == 1)
             {
                 flag = true;
             }
-            if(!world.isBlockNormalCube(i + 1, j, k) && i1 == 2)
+            if(!world.isBlockSolidOnSide(i + 1, j, k,4) && i1 == 2)
             {
                 flag = true;
             }
-            if(!world.isBlockNormalCube(i, j, k - 1) && i1 == 3)
+            if(!world.isBlockSolidOnSide(i, j, k - 1,3) && i1 == 3)
             {
                 flag = true;
             }
-            if(!world.isBlockNormalCube(i, j, k + 1) && i1 == 4)
+            if(!world.isBlockSolidOnSide(i, j, k + 1,2) && i1 == 4)
             {
                 flag = true;
             }
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/BlockTrapDoor.java ../src_work/minecraft/net/minecraft/src/BlockTrapDoor.java
--- ../src_base/minecraft/net/minecraft/src/BlockTrapDoor.java	2021-01-03 20:24:40.204669000 -0500
+++ ../src_work/minecraft/net/minecraft/src/BlockTrapDoor.java	2021-01-03 20:25:20.029906800 -0500
@@ -147,7 +147,7 @@
         {
             j1--;
         }
-        if(!world.isBlockNormalCube(j1, j, k1))
+        if(!disableValidation && !world.isBlockSolidOnSide(j1, j, k1, (i1&3)+2))
         {
             world.setBlockWithNotify(i, j, k, 0);
             dropBlockAsItem(world, i, j, k, i1);
@@ -213,11 +213,15 @@
         {
             i--;
         }
-        return world.isBlockNormalCube(i, j, k);
+        return world.isBlockSolidOnSide(i, j, k, l);
     }
 
     public static boolean isTrapdoorOpen(int i)
     {
         return (i & 4) != 0;
     }
+
+    /* FORGE: Set this to allow trapdoors to remain free-floating
+     */
+    public static boolean disableValidation=false;
 }
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/BlockWeb.java ../src_work/minecraft/net/minecraft/src/BlockWeb.java
--- ../src_base/minecraft/net/minecraft/src/BlockWeb.java	2021-01-03 20:24:40.208172000 -0500
+++ ../src_work/minecraft/net/minecraft/src/BlockWeb.java	2021-01-03 20:25:20.032407600 -0500
@@ -4,6 +4,7 @@
 
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import java.util.Random;
 
 // Referenced classes of package net.minecraft.src:
@@ -47,4 +48,4 @@
     {
         return Item.silk.shiftedIndex;
     }
-}
+}
\ No newline at end of file
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/Chunk.java ../src_work/minecraft/net/minecraft/src/Chunk.java
--- ../src_base/minecraft/net/minecraft/src/Chunk.java	2021-01-03 20:24:40.237699000 -0500
+++ ../src_work/minecraft/net/minecraft/src/Chunk.java	2021-01-03 20:25:20.034910500 -0500
@@ -3,6 +3,7 @@
 // Decompiler options: packimports(3) braces deadcode 
 
 package net.minecraft.src;
+import net.minecraft.src.forge.*;
 
 import java.io.PrintStream;
 import java.util.*;
@@ -249,6 +250,13 @@
         }
         int l1 = xPosition * 16 + i;
         int i2 = zPosition * 16 + k;
+
+        if (Block.blocksList[k1] instanceof IOverrideReplace) {
+            IOverrideReplace iovr = (IOverrideReplace) Block.blocksList[k1];
+            if (!iovr.canReplaceBlock(worldObj, l1, j, i2, l))
+                return iovr.getReplacedSuccess();
+        }
+
         blocks[i << 11 | k << 7 | j] = (byte)(byte0 & 0xff);
         if(k1 != 0 && !worldObj.multiplayerWorld)
         {
@@ -292,6 +300,13 @@
         }
         int k1 = xPosition * 16 + i;
         int l1 = zPosition * 16 + k;
+
+        if (Block.blocksList[j1] instanceof IOverrideReplace) {
+            IOverrideReplace iovr = (IOverrideReplace) Block.blocksList[j1];
+            if (!iovr.canReplaceBlock(worldObj, k1, j, l1, l))
+                return iovr.getReplacedSuccess();
+        }
+
         blocks[i << 11 | k << 7 | j] = (byte)(byte0 & 0xff);
         if(j1 != 0)
         {
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/EffectRenderer.java ../src_work/minecraft/net/minecraft/src/EffectRenderer.java
--- ../src_base/minecraft/net/minecraft/src/EffectRenderer.java	2021-01-03 20:24:40.360804300 -0500
+++ ../src_work/minecraft/net/minecraft/src/EffectRenderer.java	2021-01-03 20:25:20.037912900 -0500
@@ -7,6 +7,9 @@
 import java.util.*;
 import org.lwjgl.opengl.GL11;
 
+import net.minecraft.src.forge.BlockTextureParticles;
+import net.minecraft.src.forge.ITextureProvider;
+
 // Referenced classes of package net.minecraft.src:
 //            EntityFX, Entity, MathHelper, RenderEngine, 
 //            Tessellator, Block, EntityDiggingFX, World
@@ -16,6 +19,7 @@
 
     public EffectRenderer(World world, RenderEngine renderengine)
     {
+        effectList = new ArrayList();
         fxLayers = new List[4];
         rand = new Random();
         if(world != null)
@@ -55,6 +59,18 @@
             }
 
         }
+        for (int x = 0; x < effectList.size(); x++) {
+            BlockTextureParticles entry = (BlockTextureParticles) effectList
+                    .get(x);
+            for (int y = 0; y < entry.effects.size(); y++) {
+                EntityFX entityfx = (EntityFX) entry.effects.get(y);
+                if (entityfx.isDead) {
+                    entry.effects.remove(y--);
+                }
+            }
+            if (effectList.size() == 0)
+                effectList.remove(x--);
+        }
 
     }
 
@@ -93,11 +109,26 @@
             for(int k = 0; k < fxLayers[i].size(); k++)
             {
                 EntityFX entityfx = (EntityFX)fxLayers[i].get(k);
+				if(entityfx instanceof EntityDiggingFX) continue;
                 entityfx.renderParticle(tessellator, f, f1, f5, f2, f3, f4);
             }
 
             tessellator.draw();
         }
+        Tessellator tessellator = Tessellator.instance;
+
+        for (int x = 0; x < effectList.size(); x++) {
+            BlockTextureParticles entry = (BlockTextureParticles) effectList
+                    .get(x);
+            GL11.glBindTexture(3553 /* GL_TEXTURE_2D */,
+                    renderer.getTexture(entry.texture));
+            tessellator.startDrawingQuads();
+            for (int y = 0; y < entry.effects.size(); y++) {
+                EntityFX entityfx = (EntityFX) entry.effects.get(y);
+                entityfx.renderParticle(tessellator, f, f1, f5, f2, f3, f4);
+            }
+            tessellator.draw();
+        }
 
     }
 
@@ -124,6 +155,13 @@
         {
             fxLayers[i].clear();
         }
+		
+        for (int x = 0; x < effectList.size(); x++) {
+            BlockTextureParticles entry = (BlockTextureParticles) effectList
+                    .get(x);
+            entry.effects.clear();
+        }
+        effectList.clear();
 
     }
 
@@ -145,7 +183,12 @@
                     double d1 = (double)j + ((double)l1 + 0.5D) / (double)j1;
                     double d2 = (double)k + ((double)i2 + 0.5D) / (double)j1;
                     int j2 = rand.nextInt(6);
-                    addEffect((new EntityDiggingFX(worldObj, d, d1, d2, d - (double)i - 0.5D, d1 - (double)j - 0.5D, d2 - (double)k - 0.5D, block, j2, i1)).func_4041_a(i, j, k));
+                    EntityDiggingFX dig_effect = new EntityDiggingFX(worldObj,
+                            d, d1, d2, d - (double) i - 0.5D, d1 - (double) j
+                                    - 0.5D, d2 - (double) k - 0.5D, block, j2,
+                            i1);
+                    dig_effect.func_4041_a(i, j, k);
+                    addDigParticleEffect(dig_effect, block);
                 }
 
             }
@@ -190,16 +233,48 @@
         {
             d = (double)i + block.maxX + (double)f;
         }
-        addEffect((new EntityDiggingFX(worldObj, d, d1, d2, 0.0D, 0.0D, 0.0D, block, l, worldObj.getBlockMetadata(i, j, k))).func_4041_a(i, j, k).func_407_b(0.2F).func_405_d(0.6F));
+        EntityDiggingFX dig_effect = new EntityDiggingFX(worldObj, d, d1, d2,
+                0.0D, 0.0D, 0.0D, block, l, worldObj.getBlockMetadata(i, j, k));
+        dig_effect.func_4041_a(i, j, k);
+        dig_effect.func_407_b(0.2F);
+        dig_effect.func_405_d(0.6F);
+        addDigParticleEffect(dig_effect, block);
     }
 
     public String getStatistics()
     {
         return (new StringBuilder()).append("").append(fxLayers[0].size() + fxLayers[1].size() + fxLayers[2].size()).toString();
     }
+	
+    public void addDigParticleEffect(EntityDiggingFX dig_effect, Block block) {
+        boolean added = false;
+        String comp;
+
+        if (block instanceof ITextureProvider) {
+            comp = ((ITextureProvider) block).getTextureFile();
+        } else {
+            comp = "/terrain.png";
+        }
+        for (int x = 0; x < effectList.size(); x++) {
+            BlockTextureParticles entry = (BlockTextureParticles) effectList
+                    .get(x);
+            if (entry.texture.equals(comp)) {
+                entry.effects.add(dig_effect);
+                added = true;
+            }
+        }
+        if (!added) {
+            BlockTextureParticles entry = new BlockTextureParticles();
+            entry.texture = comp;
+            entry.effects.add(dig_effect);
+            effectList.add(entry);
+        }
+        addEffect(dig_effect);
+    }
 
     protected World worldObj;
     private List fxLayers[];
+    private List effectList;
     private RenderEngine renderer;
     private Random rand;
 }
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/EntityLiving.java ../src_work/minecraft/net/minecraft/src/EntityLiving.java
--- ../src_base/minecraft/net/minecraft/src/EntityLiving.java	2021-01-03 20:24:40.519439000 -0500
+++ ../src_work/minecraft/net/minecraft/src/EntityLiving.java	2021-01-03 20:25:20.040915900 -0500
@@ -555,7 +555,9 @@
         int i = MathHelper.floor_double(posX);
         int j = MathHelper.floor_double(boundingBox.minY);
         int k = MathHelper.floor_double(posZ);
-        return worldObj.getBlockId(i, j, k) == Block.ladder.blockID;
+	Block block=Block.blocksList[worldObj.getBlockId(i,j,k)];
+	if(block==null) return false;
+	return block.isLadder();
     }
 
     public void writeEntityToNBT(NBTTagCompound nbttagcompound)
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/EntityPlayer.java ../src_work/minecraft/net/minecraft/src/EntityPlayer.java
--- ../src_base/minecraft/net/minecraft/src/EntityPlayer.java	2021-01-03 20:24:40.577991000 -0500
+++ ../src_work/minecraft/net/minecraft/src/EntityPlayer.java	2021-01-03 20:25:20.043917500 -0500
@@ -6,6 +6,10 @@
 
 import java.util.*;
 
+import net.minecraft.src.forge.ArmorProperties;
+import net.minecraft.src.forge.ISpecialArmor;
+import net.minecraft.src.forge.ForgeHooks;
+
 // Referenced classes of package net.minecraft.src:
 //            EntityLiving, InventoryPlayer, ContainerPlayer, World, 
 //            ChunkCoordinates, DataWatcher, Container, StatList, 
@@ -316,6 +320,8 @@
         worldObj.entityJoinedWorld(entityitem);
     }
 
+    /* FORGE: This isn't called anymore
+     */
     public float getCurrentPlayerStrVsBlock(Block block)
     {
         float f = inventory.getStrVsBlock(block);
@@ -330,6 +336,24 @@
         return f;
     }
 
+    /* FORGE: Extended to allow metadata.
+     */
+    public float getCurrentPlayerStrVsBlock(Block block, int md)
+    {
+        float f = 1.0F;
+	ItemStack ist=inventory.getCurrentItem();
+	if(ist!=null) f=ist.getItem().getStrVsBlock(ist,block,md);
+        if(isInsideOfMaterial(Material.water))
+        {
+            f /= 5F;
+        }
+        if(!onGround)
+        {
+            f /= 5F;
+        }
+        return f;
+    }
+
     public boolean canHarvestBlock(Block block)
     {
         return inventory.canHarvestBlock(block);
@@ -477,6 +501,25 @@
 
     protected void damageEntity(int i)
     {
+    	 boolean doRegularComputation = true;
+         int initialDamage = i;
+         
+         for (ItemStack stack : inventory.armorInventory) {
+             if (stack != null && stack.getItem() instanceof ISpecialArmor) {
+                 ISpecialArmor armor = (ISpecialArmor) stack.getItem();
+                 
+                 ArmorProperties props = armor.getProperties(this, initialDamage, i);                            
+                 i = i - props.damageRemove;
+                 doRegularComputation = doRegularComputation
+                         && props.allowRegularComputation;
+             }
+         }
+         
+         if (!doRegularComputation) {
+             super.damageEntity(i);
+             return;
+         }
+        
         int j = 25 - inventory.getTotalArmorValue();
         int k = i * j + damageRemainder;
         inventory.damageArmor(i);
@@ -522,7 +565,9 @@
 
     public void destroyCurrentEquippedItem()
     {
+	ItemStack orig=inventory.getCurrentItem();
         inventory.setInventorySlotContents(inventory.currentItem, null);
+	ForgeHooks.onDestroyCurrentItem(this,orig);
     }
 
     public double getYOffset()
@@ -594,6 +639,10 @@
 
     public EnumStatus sleepInBedAt(int i, int j, int k)
     {
+	EnumStatus customSleep = ForgeHooks.sleepInBedAt(this, i, j, k);
+	if (customSleep != null) {
+	    return customSleep;
+	}
         if(!worldObj.multiplayerWorld)
         {
             if(isPlayerSleeping() || !isEntityAlive())
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/EntityRenderer.java ../src_work/minecraft/net/minecraft/src/EntityRenderer.java
--- ../src_base/minecraft/net/minecraft/src/EntityRenderer.java	2021-01-03 20:24:40.626037800 -0500
+++ ../src_work/minecraft/net/minecraft/src/EntityRenderer.java	2021-01-03 20:25:20.047421200 -0500
@@ -3,6 +3,8 @@
 // Decompiler options: packimports(3) braces deadcode 
 
 package net.minecraft.src;
+import net.minecraft.src.forge.ForgeHooksClient;
+import net.minecraft.src.reforged.Reforged;
 
 import java.nio.FloatBuffer;
 import java.util.List;
@@ -106,46 +108,45 @@
             d1 = d = 32D;
         } else
         {
-            if(d1 > 3D)
+            float f1 = Reforged.reachGetEntityPlayer(mc.thePlayer);
+            //changed from > to <. Keep an eye out for bugs. This is done for custom entity reach
+            if(d1 <= (double)f1)
             {
-                d1 = 3D;
+                d1 = f1;
             }
             d = d1;
         }
         Vec3D vec3d1 = mc.renderViewEntity.getLook(f);
         Vec3D vec3d2 = vec3d.addVector(vec3d1.xCoord * d, vec3d1.yCoord * d, vec3d1.zCoord * d);
         pointedEntity = null;
-        float f1 = 1.0F;
-        List list = mc.theWorld.getEntitiesWithinAABBExcludingEntity(mc.renderViewEntity, mc.renderViewEntity.boundingBox.addCoord(vec3d1.xCoord * d, vec3d1.yCoord * d, vec3d1.zCoord * d).expand(f1, f1, f1));
+        float f2 = 1.0F;
+        List list = mc.theWorld.getEntitiesWithinAABBExcludingEntity(mc.renderViewEntity, mc.renderViewEntity.boundingBox.addCoord(vec3d1.xCoord * d, vec3d1.yCoord * d, vec3d1.zCoord * d).expand(f2, f2, f2));
         double d2 = 0.0D;
         for(int i = 0; i < list.size(); i++)
         {
             Entity entity = (Entity)list.get(i);
-            if(!entity.canBeCollidedWith())
+            if(entity.canBeCollidedWith())
             {
-                continue;
-            }
-            float f2 = entity.getCollisionBorderSize();
-            AxisAlignedBB axisalignedbb = entity.boundingBox.expand(f2, f2, f2);
-            MovingObjectPosition movingobjectposition = axisalignedbb.func_1169_a(vec3d, vec3d2);
-            if(axisalignedbb.isVecInside(vec3d))
-            {
-                if(0.0D < d2 || d2 == 0.0D)
+                float f3 = entity.getCollisionBorderSize();
+                AxisAlignedBB axisalignedbb = entity.boundingBox.expand(f3, f3, f3);
+                MovingObjectPosition movingobjectposition = axisalignedbb.func_1169_a(vec3d, vec3d2);
+                if(axisalignedbb.isVecInside(vec3d))
+                {
+                    if(0.0D < d2 || d2 == 0.0D)
+                    {
+                        pointedEntity = entity;
+                        d2 = 0.0D;
+                    }
+                } else
+                if(movingobjectposition != null)
                 {
-                    pointedEntity = entity;
-                    d2 = 0.0D;
+                    double d3 = vec3d.distanceTo(movingobjectposition.hitVec);
+                    if(d3 < d2 || d2 == 0.0D)
+                    {
+                        pointedEntity = entity;
+                        d2 = d3;
+                    }
                 }
-                continue;
-            }
-            if(movingobjectposition == null)
-            {
-                continue;
-            }
-            double d3 = vec3d.distanceTo(movingobjectposition.hitVec);
-            if(d3 < d2 || d2 == 0.0D)
-            {
-                pointedEntity = entity;
-                d2 = d3;
             }
         }
 
@@ -573,8 +574,12 @@
             {
                 EntityPlayer entityplayer = (EntityPlayer)entityliving;
                 GL11.glDisable(3008 /*GL_ALPHA_TEST*/);
+		if(!ForgeHooksClient.onBlockHighlight(renderglobal,entityplayer,
+			mc.objectMouseOver,0,
+			entityplayer.inventory.getCurrentItem(),f)) {
                 renderglobal.drawBlockBreaking(entityplayer, mc.objectMouseOver, 0, entityplayer.inventory.getCurrentItem(), f);
                 renderglobal.drawSelectionBox(entityplayer, mc.objectMouseOver, 0, entityplayer.inventory.getCurrentItem(), f);
+		}
                 GL11.glEnable(3008 /*GL_ALPHA_TEST*/);
             }
             GL11.glBlendFunc(770, 771);
@@ -619,8 +624,12 @@
             {
                 EntityPlayer entityplayer1 = (EntityPlayer)entityliving;
                 GL11.glDisable(3008 /*GL_ALPHA_TEST*/);
+		if(!ForgeHooksClient.onBlockHighlight(renderglobal,entityplayer1,
+			mc.objectMouseOver,0,
+			entityplayer1.inventory.getCurrentItem(),f)) {
                 renderglobal.drawBlockBreaking(entityplayer1, mc.objectMouseOver, 0, entityplayer1.inventory.getCurrentItem(), f);
                 renderglobal.drawSelectionBox(entityplayer1, mc.objectMouseOver, 0, entityplayer1.inventory.getCurrentItem(), f);
+		}
                 GL11.glEnable(3008 /*GL_ALPHA_TEST*/);
             }
             renderRainSnow(f);
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/EntitySheep.java ../src_work/minecraft/net/minecraft/src/EntitySheep.java
--- ../src_base/minecraft/net/minecraft/src/EntitySheep.java	2021-01-03 20:24:40.630036000 -0500
+++ ../src_work/minecraft/net/minecraft/src/EntitySheep.java	2021-01-03 20:25:20.050422900 -0500
@@ -4,6 +4,7 @@
 
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import java.util.Random;
 
 // Referenced classes of package net.minecraft.src:
@@ -61,11 +62,10 @@
                     entityitem.motionX += (rand.nextFloat() - rand.nextFloat()) * 0.1F;
                     entityitem.motionZ += (rand.nextFloat() - rand.nextFloat()) * 0.1F;
                 }
-
             }
             itemstack.damageItem(1, entityplayer);
         }
-        return false;
+        return super.interact(entityplayer);
     }
 
     public void writeEntityToNBT(NBTTagCompound nbttagcompound)
@@ -183,4 +183,4 @@
         }
     };
 
-}
+}
\ No newline at end of file
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/Explosion.java ../src_work/minecraft/net/minecraft/src/Explosion.java
--- ../src_base/minecraft/net/minecraft/src/Explosion.java	2021-01-03 20:24:40.737627000 -0500
+++ ../src_work/minecraft/net/minecraft/src/Explosion.java	2021-01-03 20:25:20.053425600 -0500
@@ -3,6 +3,7 @@
 // Decompiler options: packimports(3) braces deadcode 
 
 package net.minecraft.src;
+import net.minecraft.src.forge.ISpecialResistance;
 
 import java.util.*;
 
@@ -65,7 +66,17 @@
                         int i5 = worldObj.getBlockId(j4, k4, l4);
                         if(i5 > 0)
                         {
-                            f1 -= (Block.blocksList[i5].getExplosionResistance(exploder) + 0.3F) * f2;
+                            if (Block.blocksList[i5] instanceof ISpecialResistance) {
+                                ISpecialResistance isr = (ISpecialResistance) Block.blocksList[i5];
+                                f1 -= (isr.getSpecialExplosionResistance(
+                                        worldObj, j4, k4, l4, explosionX,
+                                        explosionY, explosionZ, exploder) + 0.3F)
+                                        * f2;
+                            } else {
+                                f1 -= (Block.blocksList[i5]
+                                        .getExplosionResistance(exploder) + 0.3F)
+                                        * f2;
+                            }
                         }
                         if(f1 > 0.0F)
                         {
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/FurnaceRecipes.java ../src_work/minecraft/net/minecraft/src/FurnaceRecipes.java
--- ../src_base/minecraft/net/minecraft/src/FurnaceRecipes.java	2021-01-03 20:24:40.749138000 -0500
+++ ../src_work/minecraft/net/minecraft/src/FurnaceRecipes.java	2021-01-03 20:25:20.056428400 -0500
@@ -4,6 +4,7 @@
 
 package net.minecraft.src;
 
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -13,6 +14,12 @@
 public class FurnaceRecipes
 {
 
+	private static final FurnaceRecipes smeltingBase = new FurnaceRecipes();
+    
+    /** The list of smelting results. */
+    private Map smeltingList;
+    private Map metaSmeltingList;
+	
     public static final FurnaceRecipes smelting()
     {
         return smeltingBase;
@@ -21,6 +28,7 @@
     private FurnaceRecipes()
     {
         smeltingList = new HashMap();
+        metaSmeltingList = new HashMap();
         addSmelting(Block.oreIron.blockID, new ItemStack(Item.ingotIron));
         addSmelting(Block.oreGold.blockID, new ItemStack(Item.ingotGold));
         addSmelting(Block.oreDiamond.blockID, new ItemStack(Item.diamond));
@@ -33,11 +41,19 @@
         addSmelting(Block.wood.blockID, new ItemStack(Item.coal, 1, 1));
     }
 
+    /**
+     * Adds a smelting recipe.
+     */
     public void addSmelting(int i, ItemStack itemstack)
     {
         smeltingList.put(Integer.valueOf(i), itemstack);
     }
 
+    /**
+     * Returns the smelting result of an item.
+     * Deprecated in favor of a metadata sensitive version
+     */
+    @Deprecated
     public ItemStack getSmeltingResult(int i)
     {
         return (ItemStack)smeltingList.get(Integer.valueOf(i));
@@ -48,7 +64,34 @@
         return smeltingList;
     }
 
-    private static final FurnaceRecipes smeltingBase = new FurnaceRecipes();
-    private Map smeltingList;
-
+    /**
+     * Add a metadata-sensitive furnace recipe
+     * @param itemID The Item ID
+     * @param metadata The Item Metadata
+     * @param itemstack The ItemStack for the result
+     */
+    public void addSmelting(int itemID, int metadata, ItemStack itemstack)
+    {
+        metaSmeltingList.put(Arrays.asList(itemID, metadata), itemstack);
+    }
+    
+    /**
+     * Used to get the resulting ItemStack form a source ItemStack
+     * @param item The Source ItemStack
+     * @return The result ItemStack
+     */
+    public ItemStack getSmeltingResult(ItemStack item) 
+    {
+        if (item == null)
+        {
+            return null;
+        }
+        ItemStack ret = (ItemStack)metaSmeltingList.get(Arrays.asList(item.itemID, item.getItemDamage()));
+        if (ret != null) 
+        {
+            return ret;
+        }
+        return (ItemStack)smeltingList.get(Integer.valueOf(item.itemID));
+    }
+    
 }
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/IDResolver.java ../src_work/minecraft/net/minecraft/src/IDResolver.java
--- ../src_base/minecraft/net/minecraft/src/IDResolver.java	1969-12-31 19:00:00.000000000 -0500
+++ ../src_work/minecraft/net/minecraft/src/IDResolver.java	2021-01-03 20:56:16.646545800 -0500
@@ -0,0 +1,20 @@
+package net.minecraft.src;
+
+public class IDResolver {
+
+	public static boolean HasStoredID(int i, boolean b) {
+		// TODO Auto-generated method stub
+		return false;
+	}
+
+	public static int GetConflictedBlockID(int i, Block block) {
+		// TODO Auto-generated method stub
+		return 0;
+	}
+
+	public static int GetConflictedItemID(int i, Item item) {
+		// TODO Auto-generated method stub
+		return 0;
+	}
+
+}
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/Item.java ../src_work/minecraft/net/minecraft/src/Item.java
--- ../src_base/minecraft/net/minecraft/src/Item.java	2021-01-03 20:24:41.020871000 -0500
+++ ../src_work/minecraft/net/minecraft/src/Item.java	2021-01-03 20:57:04.244324600 -0500
@@ -7,6 +7,8 @@
 import java.io.PrintStream;
 import java.util.Random;
 
+import net.minecraft.src.reforged.Reforged;
+
 // Referenced classes of package net.minecraft.src:
 //            ItemStack, StatCollector, ItemSpade, EnumToolMaterial, 
 //            ItemPickaxe, ItemAxe, ItemFlintAndSteel, ItemFood, 
@@ -29,12 +31,34 @@
         bFull3D = false;
         hasSubtypes = false;
         containerItem = null;
-        shiftedIndex = 256 + i;
-        if(itemsList[256 + i] != null)
-        {
-            System.out.println((new StringBuilder()).append("CONFLICT @ ").append(i).toString());
+        
+        if (Reforged.hasIDResolver()) {
+            i += 256;
+            if(itemsList[i] != null || IDResolver.HasStoredID(i, false))
+            {
+                int j = IDResolver.GetConflictedItemID(i, this);
+                if(j == -1)
+                {
+                    System.out.println((new StringBuilder()).append("CONFLICT @ ").append(i).toString());
+                } else
+                {
+                    i = j;
+                }
+            }
+            shiftedIndex = i;
+            itemsList[i] = this;
+        } else {
+        	shiftedIndex = 256 + i;
+	        if(itemsList[256 + i] != null)
+	        {
+	            System.out.println((new StringBuilder()).append("CONFLICT @ ").append(i).toString());
+	        }
+	        itemsList[256 + i] = this;
         }
-        itemsList[256 + i] = this;
+    }
+    
+    public static void touch() {
+    	
     }
 
     public Item setIconIndex(int i)
@@ -75,6 +99,13 @@
         return 1.0F;
     }
 
+    /* FORGE: Metadata-sensitive version of getStrVsBlock
+     */
+    public float getStrVsBlock(ItemStack itemstack, Block block, int md)
+    {
+	    return getStrVsBlock(itemstack,block);
+    }
+
     public ItemStack onItemRightClick(ItemStack itemstack, World world, EntityPlayer entityplayer)
     {
         return itemstack;
@@ -212,6 +243,27 @@
     public void onCreated(ItemStack itemstack, World world, EntityPlayer entityplayer)
     {
     }
+    
+    /* =========================================================== FORGE START ===============================================================*/
+
+    /**
+     * Called before a block is broken.  Return true to prevent default block harvesting.
+     *
+     * Note: In SMP, this is called on both client and server sides!
+     * 
+     * @param itemstack The current ItemStack
+     * @param X The X Position
+     * @param Y The X Position
+     * @param Z The X Position
+     * @param player The Player that is wielding the item
+     * @return True to prevent harvesting, false to continue as normal
+     */
+    public boolean onBlockStartBreak(ItemStack itemstack, int X, int Y, int Z, EntityPlayer player) 
+    {
+        return false;
+    }
+
+    /* ===========================================================  FORGE END  ===============================================================*/
 
     protected static Random itemRand = new Random();
     public static Item itemsList[] = new Item[32000];
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/ItemBucket.java ../src_work/minecraft/net/minecraft/src/ItemBucket.java
--- ../src_base/minecraft/net/minecraft/src/ItemBucket.java	2021-01-03 20:24:41.043390000 -0500
+++ ../src_work/minecraft/net/minecraft/src/ItemBucket.java	2021-01-03 20:25:20.061933600 -0500
@@ -6,6 +6,8 @@
 
 import java.util.Random;
 
+import net.minecraft.src.forge.MinecraftForge;
+
 // Referenced classes of package net.minecraft.src:
 //            Item, EntityPlayer, Vec3D, MathHelper, 
 //            World, MovingObjectPosition, EnumMovingObjectType, Material, 
@@ -55,6 +57,13 @@
             }
             if(isFull == 0)
             {
+                ItemStack customBucket = MinecraftForge.fillCustomBucket(world,
+                        i, j, k);
+            	
+                if (customBucket != null) {
+                   return customBucket;
+                }
+
                 if(world.getBlockMaterial(i, j, k) == Material.water && world.getBlockMetadata(i, j, k) == 0)
                 {
                     world.setBlockWithNotify(i, j, k, 0);
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/ItemRenderer.java ../src_work/minecraft/net/minecraft/src/ItemRenderer.java
--- ../src_base/minecraft/net/minecraft/src/ItemRenderer.java	2021-01-03 20:24:41.120457300 -0500
+++ ../src_work/minecraft/net/minecraft/src/ItemRenderer.java	2021-01-03 20:25:20.064435200 -0500
@@ -5,6 +5,8 @@
 package net.minecraft.src;
 
 import net.minecraft.client.Minecraft;
+import net.minecraft.src.forge.ForgeHooksClient;
+
 import org.lwjgl.opengl.GL11;
 
 // Referenced classes of package net.minecraft.src:
@@ -34,15 +36,18 @@
         if(itemstack.itemID < 256 && RenderBlocks.renderItemIn3d(Block.blocksList[itemstack.itemID].getRenderType()))
         {
             GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, mc.renderEngine.getTexture("/terrain.png"));
+            ForgeHooksClient.overrideTexture (Block.blocksList[itemstack.itemID]);
             renderBlocksInstance.renderBlockOnInventory(Block.blocksList[itemstack.itemID], itemstack.getItemDamage(), entityliving.getEntityBrightness(1.0F));
         } else
         {
             if(itemstack.itemID < 256)
             {
                 GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, mc.renderEngine.getTexture("/terrain.png"));
+                ForgeHooksClient.overrideTexture (Block.blocksList[itemstack.itemID]);
             } else
             {
                 GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, mc.renderEngine.getTexture("/gui/items.png"));
+                ForgeHooksClient.overrideTexture (Item.itemsList[itemstack.itemID]);
             }
             Tessellator tessellator = Tessellator.instance;
             int i = entityliving.getItemIcon(itemstack);
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/ItemShears.java ../src_work/minecraft/net/minecraft/src/ItemShears.java
--- ../src_base/minecraft/net/minecraft/src/ItemShears.java	2021-01-03 20:24:41.130965000 -0500
+++ ../src_work/minecraft/net/minecraft/src/ItemShears.java	2021-01-03 20:25:20.066937200 -0500
@@ -4,6 +4,9 @@
 
 package net.minecraft.src;
 
+import java.util.ArrayList;
+
+import net.minecraft.src.forge.IShearable;
 
 // Referenced classes of package net.minecraft.src:
 //            Item, Block, BlockLeaves, ItemStack, 
@@ -21,7 +24,7 @@
 
     public boolean onBlockDestroyed(ItemStack itemstack, int i, int j, int k, int l, EntityLiving entityliving)
     {
-        if(i == Block.leaves.blockID || i == Block.web.blockID)
+        if(i == Block.web.blockID || i == Block.leaves.blockID || Block.blocksList[i] instanceof IShearable)
         {
             itemstack.damageItem(1, entityliving);
         }
@@ -47,4 +50,64 @@
             return super.getStrVsBlock(itemstack, block);
         }
     }
-}
+    
+    @Override
+    public void saddleEntity(ItemStack itemstack, EntityLiving entity)
+    {
+        if (entity.worldObj.multiplayerWorld)
+        {
+            return;
+        }
+        if (entity instanceof IShearable)
+        {
+            IShearable target = (IShearable)entity;
+            if (target.isShearable(itemstack, entity.worldObj, (int)entity.posX, (int)entity.posY, (int)entity.posZ))
+            {
+                ArrayList<ItemStack> drops = target.onSheared(itemstack, entity.worldObj, (int)entity.posX, (int)entity.posY, (int)entity.posZ);
+                for(ItemStack stack : drops)
+                {
+                    EntityItem ent = entity.entityDropItem(stack, 1.0F);
+                    ent.motionY += entity.rand.nextFloat() * 0.05F;
+                    ent.motionX += (entity.rand.nextFloat() - entity.rand.nextFloat()) * 0.1F;
+                    ent.motionZ += (entity.rand.nextFloat() - entity.rand.nextFloat()) * 0.1F;
+                }
+                itemstack.damageItem(1, entity);
+            }
+        }
+    }
+    
+    @Override
+     public boolean onBlockStartBreak(ItemStack itemstack, int X, int Y, int Z, EntityPlayer player) 
+     {
+    	
+        if (player.worldObj.multiplayerWorld)
+        {
+            return false;
+        }
+        
+        int id = player.worldObj.getBlockId(X, Y, Z);
+        
+        if ((Block.blocksList[id] != null && Block.blocksList[id] instanceof IShearable))
+        {
+            IShearable target = (IShearable)Block.blocksList[id];
+            if (target.isShearable(itemstack, player.worldObj, X, Y, Z))
+            {
+                ArrayList<ItemStack> drops = target.onSheared(itemstack, player.worldObj, X, Y, Z);
+                for(ItemStack stack : drops)
+                {
+                    float f = 0.7F;
+                    double d  = (double)(player.rand.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
+                    double d1 = (double)(player.rand.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
+                    double d2 = (double)(player.rand.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
+                    EntityItem entityitem = new EntityItem(player.worldObj, (double)X + d, (double)Y + d1, (double)Z + d2, stack);
+                    entityitem.delayBeforeCanPickup = 10;
+                    player.worldObj.entityJoinedWorld(entityitem);
+                }
+                itemstack.damageItem(1, player);
+                player.addStat(StatList.mineBlockStatArray[id], 1);
+            }
+        }
+        return false;
+     }
+    
+}
\ No newline at end of file
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/ItemTool.java ../src_work/minecraft/net/minecraft/src/ItemTool.java
--- ../src_base/minecraft/net/minecraft/src/ItemTool.java	2021-01-03 20:24:41.157488000 -0500
+++ ../src_work/minecraft/net/minecraft/src/ItemTool.java	2021-01-03 20:25:20.069440100 -0500
@@ -4,6 +4,8 @@
 
 package net.minecraft.src;
 
+import java.util.Arrays;
+import net.minecraft.src.forge.ForgeHooks;
 
 // Referenced classes of package net.minecraft.src:
 //            Item, EnumToolMaterial, ItemStack, Block, 
@@ -37,6 +39,14 @@
         return 1.0F;
     }
 
+    /* FORGE: Overridden to allow custom tool effectiveness
+     */
+    public float getStrVsBlock(ItemStack itemstack, Block block, int md) {
+	    if(ForgeHooks.isToolEffective(itemstack,block,md))
+                return efficiencyOnProperMaterial;
+	    return getStrVsBlock(itemstack,block);
+    }
+
     public boolean hitEntity(ItemStack itemstack, EntityLiving entityliving, EntityLiving entityliving1)
     {
         itemstack.damageItem(2, entityliving1);
@@ -60,7 +70,7 @@
     }
 
     private Block blocksEffectiveAgainst[];
-    private float efficiencyOnProperMaterial;
-    private int damageVsEntity;
+    public float efficiencyOnProperMaterial;
+    public int damageVsEntity;
     protected EnumToolMaterial toolMaterial;
 }
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/Loc.java ../src_work/minecraft/net/minecraft/src/Loc.java
--- ../src_base/minecraft/net/minecraft/src/Loc.java	1969-12-31 19:00:00.000000000 -0500
+++ ../src_work/minecraft/net/minecraft/src/Loc.java	2021-01-03 21:45:25.216020500 -0500
@@ -0,0 +1,9 @@
+package net.minecraft.src;
+
+public class Loc {
+
+	public Loc(int i, int j, int k) {
+		// TODO Auto-generated constructor stub
+	}
+
+}
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/mod_Reforged.java ../src_work/minecraft/net/minecraft/src/mod_Reforged.java
--- ../src_base/minecraft/net/minecraft/src/mod_Reforged.java	1969-12-31 19:00:00.000000000 -0500
+++ ../src_work/minecraft/net/minecraft/src/mod_Reforged.java	2021-01-04 17:01:47.743665800 -0500
@@ -0,0 +1,61 @@
+/**
+ * This software is provided under the terms of the Minecraft Forge Public 
+ * License v1.0.
+ */
+
+package net.minecraft.src;
+
+import net.minecraft.src.forge.ForgeHooks;
+import net.minecraft.src.forge.MinecraftForge;
+import net.minecraft.src.reforged.IReachEntity;
+import net.minecraft.src.reforged.Reforged;
+import net.minecraft.src.reforged.ReforgedHooks;
+
+public class mod_Reforged extends BaseModMp implements IReachEntity {
+
+	final boolean testEnabled = false;
+	
+	public mod_Reforged() {
+		if (testEnabled)
+			Reforged.reachAdd(this);
+		
+		try {
+			Block.touch();
+			Item.touch();
+		} catch(NoSuchMethodError e) {
+			if (Reforged.hasIDResolver())
+				MinecraftForge.killMinecraft("mod_Reforged", "Please install Reforged after IDResolver!");
+			else 
+				MinecraftForge.killMinecraft("mod_Reforged", "Block or Item was modified. Please fix your installation!");
+		}
+		
+		try {
+			PlayerControllerMP.touch();
+			PlayerControllerSP.touch();
+		} catch (NoSuchMethodError e) {
+			if (Reforged.hasSAPI())
+				MinecraftForge.killMinecraft("mod_Reforged", "Please install Reforged after the ForgeSAPI patch and SAPI!");
+			else 
+				MinecraftForge.killMinecraft("mod_Reforged", "PlayerControllers were modified. Please fix your installation!");
+		}
+	}
+	
+	@Override
+	public String Version() {
+		return String.format("[Forge %d.%d.%d, Reforged %d.%d.%d]",
+                ForgeHooks.majorVersion,    	ForgeHooks.minorVersion, 	ForgeHooks.revisionVersion, 
+                ReforgedHooks.majorVersion,    	ReforgedHooks.minorVersion, ReforgedHooks.revisionVersion
+                );
+	}
+
+	@Override
+	public boolean reachEntityItemMatches(ItemStack itemstack) {
+		return testEnabled;
+	}
+
+	@Override
+	public float getReachEntity(ItemStack itemstack) {
+		return 100f;
+	}
+
+}
\ No newline at end of file
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/MovingObjectPosition.java ../src_work/minecraft/net/minecraft/src/MovingObjectPosition.java
--- ../src_base/minecraft/net/minecraft/src/MovingObjectPosition.java	2021-01-03 20:24:41.515797000 -0500
+++ ../src_work/minecraft/net/minecraft/src/MovingObjectPosition.java	2021-01-03 20:25:20.072443000 -0500
@@ -35,4 +35,7 @@
     public int sideHit;
     public Vec3D hitVec;
     public Entity entityHit;
+
+    // Added for RedPower subblocks.
+    public int subHit=-1;
 }
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/PlayerController.java ../src_work/minecraft/net/minecraft/src/PlayerController.java
--- ../src_base/minecraft/net/minecraft/src/PlayerController.java	2021-01-03 20:24:41.854087000 -0500
+++ ../src_work/minecraft/net/minecraft/src/PlayerController.java	2021-01-03 20:25:20.074944600 -0500
@@ -3,6 +3,7 @@
 // Decompiler options: packimports(3) braces deadcode 
 
 package net.minecraft.src;
+import net.minecraft.src.forge.*;
 
 import net.minecraft.client.Minecraft;
 
@@ -71,6 +72,7 @@
             if(itemstack1.stackSize == 0)
             {
                 entityplayer.inventory.mainInventory[entityplayer.inventory.currentItem] = null;
+		ForgeHooks.onDestroyCurrentItem(entityplayer,itemstack1);
             }
             return true;
         } else
@@ -98,6 +100,12 @@
 
     public boolean sendPlaceBlock(EntityPlayer entityplayer, World world, ItemStack itemstack, int i, int j, int k, int l)
     {
+        if (itemstack != null && itemstack.getItem() instanceof IUseItemFirst) {
+            IUseItemFirst iuif = (IUseItemFirst) itemstack.getItem();
+            if (iuif.onItemUseFirst(itemstack, entityplayer, world, i, j, k, l)) {
+                return true;
+            }
+        }
         int i1 = world.getBlockId(i, j, k);
         if(i1 > 0 && Block.blocksList[i1].blockActivated(world, i, j, k, entityplayer))
         {
@@ -108,7 +116,11 @@
             return false;
         } else
         {
-            return itemstack.useItem(entityplayer, world, i, j, k, l);
+            if(!itemstack.useItem(entityplayer, world, i, j, k, l))
+		    return false;
+            if(itemstack.stackSize == 0)
+		ForgeHooks.onDestroyCurrentItem(entityplayer,itemstack);
+	    return true;
         }
     }
 
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/PlayerControllerMP.java ../src_work/minecraft/net/minecraft/src/PlayerControllerMP.java
--- ../src_base/minecraft/net/minecraft/src/PlayerControllerMP.java	2021-01-03 20:24:41.858591000 -0500
+++ ../src_work/minecraft/net/minecraft/src/PlayerControllerMP.java	2021-01-03 21:28:03.173573700 -0500
@@ -5,6 +5,7 @@
 package net.minecraft.src;
 
 import net.minecraft.client.Minecraft;
+import net.minecraft.src.reforged.Reforged;
 
 // Referenced classes of package net.minecraft.src:
 //            PlayerController, EntityPlayer, World, EntityPlayerSP, 
@@ -30,6 +31,10 @@
         currentPlayerItem = 0;
         netClientHandler = netclienthandler;
     }
+    
+    public static void touch() {
+    	
+    }
 
     public void flipPlayer(EntityPlayer entityplayer)
     {
@@ -38,9 +43,14 @@
 
     public boolean sendBlockRemoved(int i, int j, int k, int l)
     {
+    	ItemStack itemstack = mc.thePlayer.getCurrentEquippedItem();
+    	
+    	if (itemstack != null && itemstack.getItem().onBlockStartBreak(itemstack, i, j, k, mc.thePlayer)) {
+    		return false;
+    	}
+    	
         int i1 = mc.theWorld.getBlockId(i, j, k);
         boolean flag = super.sendBlockRemoved(i, j, k, l);
-        ItemStack itemstack = mc.thePlayer.getCurrentEquippedItem();
         if(itemstack != null)
         {
             itemstack.onDestroyBlock(i1, i, j, k, mc.thePlayer);
@@ -63,7 +73,7 @@
             {
                 Block.blocksList[i1].onBlockClicked(mc.theWorld, i, j, k, mc.thePlayer);
             }
-            if(i1 > 0 && Block.blocksList[i1].blockStrength(mc.thePlayer) >= 1.0F)
+            if(i1 > 0 && Block.blocksList[i1].blockStrength(mc.theWorld,mc.thePlayer,i,j,k) >= 1.0F)
             {
                 sendBlockRemoved(i, j, k, l);
             } else
@@ -106,7 +116,7 @@
                 return;
             }
             Block block = Block.blocksList[i1];
-            curBlockDamageMP += block.blockStrength(mc.thePlayer);
+            curBlockDamageMP += block.blockStrength(mc.theWorld,mc.thePlayer,i,j,k);
             if(field_9441_h % 4F == 0.0F && block != null)
             {
                 mc.sndManager.playSound(block.stepSound.func_1145_d(), (float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F, (block.stepSound.getVolume() + 1.0F) / 8F, block.stepSound.getPitch() * 0.5F);
@@ -144,6 +154,9 @@
 
     public float getBlockReachDistance()
     {
+    	if (Reforged.hasSAPI()) {
+    		return SAPI.reachGet();
+    	}
         return 4F;
     }
 
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/PlayerControllerSP.java ../src_work/minecraft/net/minecraft/src/PlayerControllerSP.java
--- ../src_base/minecraft/net/minecraft/src/PlayerControllerSP.java	2021-01-03 20:24:41.862095000 -0500
+++ ../src_work/minecraft/net/minecraft/src/PlayerControllerSP.java	2021-01-04 17:15:34.693766200 -0500
@@ -5,6 +5,7 @@
 package net.minecraft.src;
 
 import net.minecraft.client.Minecraft;
+import net.minecraft.src.reforged.Reforged;
 
 // Referenced classes of package net.minecraft.src:
 //            PlayerController, EntityPlayer, World, EntityPlayerSP, 
@@ -25,6 +26,10 @@
         field_1069_h = 0.0F;
         blockHitWait = 0;
     }
+    
+    public static void touch() {
+    	
+    }
 
     public void flipPlayer(EntityPlayer entityplayer)
     {
@@ -33,12 +38,17 @@
 
     public boolean sendBlockRemoved(int i, int j, int k, int l)
     {
+    	ItemStack itemstack = mc.thePlayer.getCurrentEquippedItem();
+    	
+    	if (itemstack != null && itemstack.getItem().onBlockStartBreak(itemstack, i, j, k, mc.thePlayer)) {
+    		return false;
+    	}
+    	
         int i1 = mc.theWorld.getBlockId(i, j, k);
         int j1 = mc.theWorld.getBlockMetadata(i, j, k);
         boolean flag = super.sendBlockRemoved(i, j, k, l);
-        ItemStack itemstack = mc.thePlayer.getCurrentEquippedItem();
-        boolean flag1 = mc.thePlayer.canHarvestBlock(Block.blocksList[i1]);
-        if(itemstack != null)
+        boolean flag1 = Block.blocksList[i1].canHarvestBlock(mc.thePlayer,j1);
+        if(itemstack != null && itemstack.getItem().onBlockStartBreak(itemstack, i, j, k, mc.thePlayer))
         {
             itemstack.onDestroyBlock(i1, i, j, k, mc.thePlayer);
             if(itemstack.stackSize == 0)
@@ -49,6 +59,10 @@
         }
         if(flag && flag1)
         {
+        	if(Reforged.hasSAPI() && SAPI.interceptHarvest(mc.theWorld, (EntityPlayer)mc.thePlayer, new Loc(i, j, k), i1, j1))
+        	{
+        	    return flag;
+        	}
             Block.blocksList[i1].harvestBlock(mc.theWorld, mc.thePlayer, i, j, k, j1);
         }
         return flag;
@@ -62,7 +76,7 @@
         {
             Block.blocksList[i1].onBlockClicked(mc.theWorld, i, j, k, mc.thePlayer);
         }
-        if(i1 > 0 && Block.blocksList[i1].blockStrength(mc.thePlayer) >= 1.0F)
+        if(i1 > 0 && Block.blocksList[i1].blockStrength(mc.theWorld,mc.thePlayer,i,j,k) >= 1.0F)
         {
             sendBlockRemoved(i, j, k, l);
         }
@@ -89,7 +103,7 @@
                 return;
             }
             Block block = Block.blocksList[i1];
-            curBlockDamage += block.blockStrength(mc.thePlayer);
+            curBlockDamage += block.blockStrength(mc.theWorld,mc.thePlayer,i,j,k);
             if(field_1069_h % 4F == 0.0F && block != null)
             {
                 mc.sndManager.playSound(block.stepSound.func_1145_d(), (float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F, (block.stepSound.getVolume() + 1.0F) / 8F, block.stepSound.getPitch() * 0.5F);
@@ -130,7 +144,10 @@
 
     public float getBlockReachDistance()
     {
-        return 4F;
+    	if(Reforged.hasSAPI()) {
+    		return SAPI.reachGet();
+    	}
+    	return 4F;
     }
 
     public void func_717_a(World world)
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/RenderBlocks.java ../src_work/minecraft/net/minecraft/src/RenderBlocks.java
--- ../src_base/minecraft/net/minecraft/src/RenderBlocks.java	2021-01-03 20:24:42.126322000 -0500
+++ ../src_work/minecraft/net/minecraft/src/RenderBlocks.java	2021-01-03 20:25:20.084953200 -0500
@@ -2171,7 +2171,7 @@
             colorBlueTopRight *= f27;
             int i1 = block.getBlockTexture(blockAccess, i, j, k, 2);
             renderEastFace(block, i, j, k, i1);
-            if(cfgGrassFix && i1 == 3 && overrideBlockTexture < 0)
+            if(Tessellator.instance.defaultTexture && cfgGrassFix && i1 == 3 && overrideBlockTexture < 0)
             {
                 colorRedTopLeft *= f;
                 colorRedBottomLeft *= f;
@@ -2256,7 +2256,7 @@
             colorBlueTopRight *= f28;
             int j1 = block.getBlockTexture(blockAccess, i, j, k, 3);
             renderWestFace(block, i, j, k, block.getBlockTexture(blockAccess, i, j, k, 3));
-            if(cfgGrassFix && j1 == 3 && overrideBlockTexture < 0)
+            if(Tessellator.instance.defaultTexture && cfgGrassFix && j1 == 3 && overrideBlockTexture < 0)
             {
                 colorRedTopLeft *= f;
                 colorRedBottomLeft *= f;
@@ -2341,7 +2341,7 @@
             colorBlueTopRight *= f29;
             int k1 = block.getBlockTexture(blockAccess, i, j, k, 4);
             renderNorthFace(block, i, j, k, k1);
-            if(cfgGrassFix && k1 == 3 && overrideBlockTexture < 0)
+            if(Tessellator.instance.defaultTexture && cfgGrassFix && k1 == 3 && overrideBlockTexture < 0)
             {
                 colorRedTopLeft *= f;
                 colorRedBottomLeft *= f;
@@ -2426,7 +2426,7 @@
             colorBlueTopRight *= f30;
             int l1 = block.getBlockTexture(blockAccess, i, j, k, 5);
             renderSouthFace(block, i, j, k, l1);
-            if(cfgGrassFix && l1 == 3 && overrideBlockTexture < 0)
+            if(Tessellator.instance.defaultTexture && cfgGrassFix && l1 == 3 && overrideBlockTexture < 0)
             {
                 colorRedTopLeft *= f;
                 colorRedBottomLeft *= f;
@@ -2510,7 +2510,7 @@
             tessellator.setColorOpaque_F(f11 * f22, f14 * f22, f17 * f22);
             int l = block.getBlockTexture(blockAccess, i, j, k, 2);
             renderEastFace(block, i, j, k, l);
-            if(cfgGrassFix && l == 3 && overrideBlockTexture < 0)
+            if(Tessellator.instance.defaultTexture && cfgGrassFix && l == 3 && overrideBlockTexture < 0)
             {
                 tessellator.setColorOpaque_F(f11 * f22 * f, f14 * f22 * f1, f17 * f22 * f2);
                 renderEastFace(block, i, j, k, 38);
@@ -2527,7 +2527,7 @@
             tessellator.setColorOpaque_F(f11 * f23, f14 * f23, f17 * f23);
             int i1 = block.getBlockTexture(blockAccess, i, j, k, 3);
             renderWestFace(block, i, j, k, i1);
-            if(cfgGrassFix && i1 == 3 && overrideBlockTexture < 0)
+            if(Tessellator.instance.defaultTexture && cfgGrassFix && i1 == 3 && overrideBlockTexture < 0)
             {
                 tessellator.setColorOpaque_F(f11 * f23 * f, f14 * f23 * f1, f17 * f23 * f2);
                 renderWestFace(block, i, j, k, 38);
@@ -2544,7 +2544,7 @@
             tessellator.setColorOpaque_F(f12 * f24, f15 * f24, f18 * f24);
             int j1 = block.getBlockTexture(blockAccess, i, j, k, 4);
             renderNorthFace(block, i, j, k, j1);
-            if(cfgGrassFix && j1 == 3 && overrideBlockTexture < 0)
+            if(Tessellator.instance.defaultTexture && cfgGrassFix && j1 == 3 && overrideBlockTexture < 0)
             {
                 tessellator.setColorOpaque_F(f12 * f24 * f, f15 * f24 * f1, f18 * f24 * f2);
                 renderNorthFace(block, i, j, k, 38);
@@ -2561,7 +2561,7 @@
             tessellator.setColorOpaque_F(f12 * f25, f15 * f25, f18 * f25);
             int k1 = block.getBlockTexture(blockAccess, i, j, k, 5);
             renderSouthFace(block, i, j, k, k1);
-            if(cfgGrassFix && k1 == 3 && overrideBlockTexture < 0)
+            if(Tessellator.instance.defaultTexture && cfgGrassFix && k1 == 3 && overrideBlockTexture < 0)
             {
                 tessellator.setColorOpaque_F(f12 * f25 * f, f15 * f25 * f1, f18 * f25 * f2);
                 renderSouthFace(block, i, j, k, 38);
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/RenderEngine.java ../src_work/minecraft/net/minecraft/src/RenderEngine.java
--- ../src_base/minecraft/net/minecraft/src/RenderEngine.java	2021-01-03 20:24:42.152844600 -0500
+++ ../src_work/minecraft/net/minecraft/src/RenderEngine.java	2021-01-03 20:25:20.087955400 -0500
@@ -126,6 +126,9 @@
         }
         try
         {
+	    if(Tessellator.renderingWorldRenderer) {
+		System.out.printf("Warning: Texture %s not preloaded, will cause render glitches!\n",s);
+	    }
             singleIntBuffer.clear();
             GLAllocation.generateTextureNames(singleIntBuffer);
             int i = singleIntBuffer.get(0);
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/RenderGlobal.java ../src_work/minecraft/net/minecraft/src/RenderGlobal.java
--- ../src_base/minecraft/net/minecraft/src/RenderGlobal.java	2021-01-03 20:24:42.229410700 -0500
+++ ../src_work/minecraft/net/minecraft/src/RenderGlobal.java	2021-01-03 20:25:20.091458500 -0500
@@ -1558,8 +1558,8 @@
     }
 
     public List tileEntities;
-    private World worldObj;
-    private RenderEngine renderEngine;
+    public World worldObj;
+    public RenderEngine renderEngine;
     private List worldRenderersToUpdate;
     private WorldRenderer sortedWorldRenderers[];
     private WorldRenderer worldRenderers[];
@@ -1567,8 +1567,8 @@
     private int renderChunksTall;
     private int renderChunksDeep;
     private int glRenderListBase;
-    private Minecraft mc;
-    private RenderBlocks globalRenderBlocks;
+    public Minecraft mc;
+    public RenderBlocks globalRenderBlocks;
     private IntBuffer glOcclusionQueryBase;
     private boolean occlusionEnabled;
     private int cloudOffsetX;
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/RenderItem.java ../src_work/minecraft/net/minecraft/src/RenderItem.java
--- ../src_base/minecraft/net/minecraft/src/RenderItem.java	2021-01-03 20:24:42.238918100 -0500
+++ ../src_work/minecraft/net/minecraft/src/RenderItem.java	2021-01-03 20:25:20.094461000 -0500
@@ -5,6 +5,9 @@
 package net.minecraft.src;
 
 import java.util.Random;
+
+import net.minecraft.src.forge.ForgeHooksClient;
+
 import org.lwjgl.opengl.GL11;
 
 // Referenced classes of package net.minecraft.src:
@@ -51,6 +54,7 @@
         {
             GL11.glRotatef(f3, 0.0F, 1.0F, 0.0F);
             loadTexture("/terrain.png");
+            ForgeHooksClient.overrideTexture(Block.blocksList[itemstack.itemID]);
             float f4 = 0.25F;
             if(!Block.blocksList[itemstack.itemID].renderAsNormalBlock() && itemstack.itemID != Block.stairSingle.blockID && Block.blocksList[itemstack.itemID].getRenderType() != 16)
             {
@@ -78,10 +82,12 @@
             if(itemstack.itemID < 256)
             {
                 loadTexture("/terrain.png");
+                ForgeHooksClient.overrideTexture(Block.blocksList[itemstack.itemID]);
             } else
             {
                 loadTexture("/gui/items.png");
-            }
+                ForgeHooksClient.overrideTexture(Item.itemsList[itemstack.itemID]);
+            }            
             Tessellator tessellator = Tessellator.instance;
             float f6 = (float)((i % 16) * 16 + 0) / 256F;
             float f8 = (float)((i % 16) * 16 + 16) / 256F;
@@ -92,6 +98,7 @@
             float f14 = 0.25F;
             if(field_27004_a)
             {
+            	
                 int k = Item.itemsList[itemstack.itemID].getColorFromDamage(itemstack.getItemDamage());
                 float f15 = (float)(k >> 16 & 0xff) / 255F;
                 float f17 = (float)(k >> 8 & 0xff) / 255F;
@@ -131,6 +138,7 @@
         {
             int j1 = i;
             renderengine.bindTexture(renderengine.getTexture("/terrain.png"));
+            ForgeHooksClient.overrideTexture (Block.blocksList[i]);
             Block block = Block.blocksList[j1];
             GL11.glPushMatrix();
             GL11.glTranslatef(l - 2, i1 + 3, -3F);
@@ -159,9 +167,11 @@
             if(i < 256)
             {
                 renderengine.bindTexture(renderengine.getTexture("/terrain.png"));
+                ForgeHooksClient.overrideTexture (Block.blocksList[i]);
             } else
             {
                 renderengine.bindTexture(renderengine.getTexture("/gui/items.png"));
+                ForgeHooksClient.overrideTexture(Item.itemsList[i]);
             }
             int k1 = Item.itemsList[i].getColorFromDamage(j);
             float f = (float)(k1 >> 16 & 0xff) / 255F;
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/RenderPlayer.java ../src_work/minecraft/net/minecraft/src/RenderPlayer.java
--- ../src_base/minecraft/net/minecraft/src/RenderPlayer.java	2021-01-03 20:24:42.276450800 -0500
+++ ../src_work/minecraft/net/minecraft/src/RenderPlayer.java	2021-01-03 20:25:20.096963000 -0500
@@ -4,6 +4,7 @@
 
 package net.minecraft.src;
 
+import net.minecraft.src.forge.IArmorTextureProvider;
 import net.minecraft.client.Minecraft;
 import org.lwjgl.opengl.GL11;
 
@@ -34,7 +35,14 @@
             if(item instanceof ItemArmor)
             {
                 ItemArmor itemarmor = (ItemArmor)item;
-                loadTexture((new StringBuilder()).append("/armor/").append(armorFilenamePrefix[itemarmor.renderIndex]).append("_").append(i != 2 ? 1 : 2).append(".png").toString());
+                if ( item instanceof IArmorTextureProvider )
+                {
+                	loadTexture( ((IArmorTextureProvider)item).getArmorTextureFile() ); 
+                }
+                else
+                {
+                	loadTexture((new StringBuilder()).append("/armor/").append(armorFilenamePrefix[itemarmor.renderIndex]).append("_").append(i != 2 ? 1 : 2).append(".png").toString());
+                }                
                 ModelBiped modelbiped = i != 2 ? modelArmorChestplate : modelArmor;
                 modelbiped.bipedHead.showModel = i == 0;
                 modelbiped.bipedHeadwear.showModel = i == 0;
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/SAPI.java ../src_work/minecraft/net/minecraft/src/SAPI.java
--- ../src_base/minecraft/net/minecraft/src/SAPI.java	1969-12-31 19:00:00.000000000 -0500
+++ ../src_work/minecraft/net/minecraft/src/SAPI.java	2021-01-04 17:15:43.566576000 -0500
@@ -0,0 +1,15 @@
+package net.minecraft.src;
+
+public class SAPI {
+
+	public static float reachGet() {
+		// TODO Auto-generated method stub
+		return 0;
+	}
+
+	public static boolean interceptHarvest(World theWorld, EntityPlayer thePlayer, Loc loc, int i1, int j1) {
+		// TODO Auto-generated method stub
+		return false;
+	}
+
+}
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/SlotCrafting.java ../src_work/minecraft/net/minecraft/src/SlotCrafting.java
--- ../src_base/minecraft/net/minecraft/src/SlotCrafting.java	2021-01-03 20:24:42.351014000 -0500
+++ ../src_work/minecraft/net/minecraft/src/SlotCrafting.java	2021-01-03 20:25:20.099966300 -0500
@@ -3,6 +3,7 @@
 // Decompiler options: packimports(3) braces deadcode 
 
 package net.minecraft.src;
+import net.minecraft.src.forge.ForgeHooks;
 
 
 // Referenced classes of package net.minecraft.src:
@@ -60,6 +61,7 @@
             thePlayer.addStat(AchievementList.buildSword, 1);
         }
         ModLoader.TakenFromCrafting(thePlayer, itemstack);
+	ForgeHooks.onTakenFromCrafting(thePlayer, itemstack, craftMatrix);
         for(int i = 0; i < craftMatrix.getSizeInventory(); i++)
         {
             ItemStack itemstack1 = craftMatrix.getStackInSlot(i);
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/Tessellator.java ../src_work/minecraft/net/minecraft/src/Tessellator.java
--- ../src_base/minecraft/net/minecraft/src/Tessellator.java	2021-01-03 20:24:42.447597800 -0500
+++ ../src_work/minecraft/net/minecraft/src/Tessellator.java	2021-01-03 20:25:20.103469400 -0500
@@ -6,6 +6,7 @@
 
 import java.io.PrintStream;
 import java.nio.*;
+import java.util.*;
 import org.lwjgl.opengl.*;
 
 // Referenced classes of package net.minecraft.src:
@@ -13,9 +14,7 @@
 
 public class Tessellator
 {
-
-    private Tessellator(int i)
-    {
+    public Tessellator() {
         vertexCount = 0;
         hasColor = false;
         hasTexture = false;
@@ -24,20 +23,10 @@
         addedVertices = 0;
         isColorDisabled = false;
         isDrawing = false;
-        useVBO = false;
         vboIndex = 0;
-        vboCount = 10;
-        bufferSize = i;
-        byteBuffer = GLAllocation.createDirectByteBuffer(i * 4);
-        intBuffer = byteBuffer.asIntBuffer();
-        floatBuffer = byteBuffer.asFloatBuffer();
-        rawBuffer = new int[i];
-        useVBO = tryVBO && GLContext.getCapabilities().GL_ARB_vertex_buffer_object;
-        if(useVBO)
-        {
-            vertexBuffers = GLAllocation.createDirectIntBuffer(vboCount);
-            ARBVertexBufferObject.glGenBuffersARB(vertexBuffers);
-        }
+
+	rawBuffer=null;
+	rawBufferSize=0;
     }
 
     public void draw()
@@ -47,12 +36,20 @@
             throw new IllegalStateException("Not tesselating!");
         }
         isDrawing = false;
-        if(vertexCount > 0)
-        {
+	int offs=0;
+        while(offs < vertexCount) {
+	    int vtc;
+            if(drawMode == 7 && convertQuadsToTriangles) {
+		    vtc=Math.min(vertexCount-offs,trivertsInBuffer);
+            } else {
+		    vtc=Math.min(vertexCount-offs,nativeBufferSize>>5);
+            }
+
             intBuffer.clear();
-            intBuffer.put(rawBuffer, 0, rawBufferIndex);
+            intBuffer.put(rawBuffer, offs*8, vtc*8);
             byteBuffer.position(0);
-            byteBuffer.limit(rawBufferIndex * 4);
+            byteBuffer.limit(vtc*32);
+	    offs+=vtc;
             if(useVBO)
             {
                 vboIndex = (vboIndex + 1) % vboCount;
@@ -106,10 +103,10 @@
             GL11.glEnableClientState(32884 /*GL_VERTEX_ARRAY_EXT*/);
             if(drawMode == 7 && convertQuadsToTriangles)
             {
-                GL11.glDrawArrays(4, 0, vertexCount);
+                GL11.glDrawArrays(4, 0, vtc);
             } else
             {
-                GL11.glDrawArrays(drawMode, 0, vertexCount);
+                GL11.glDrawArrays(drawMode, 0, vtc);
             }
             GL11.glDisableClientState(32884 /*GL_VERTEX_ARRAY_EXT*/);
             if(hasTexture)
@@ -125,6 +122,10 @@
                 GL11.glDisableClientState(32885 /*GL_NORMAL_ARRAY_EXT*/);
             }
         }
+	if(rawBufferSize>0x20000 && rawBufferIndex<(rawBufferSize<<3)) {
+		rawBufferSize=0;
+		rawBuffer=null;
+	}
         reset();
     }
 
@@ -237,6 +238,15 @@
 
     public void addVertex(double d, double d1, double d2)
     {
+	if(rawBufferIndex >= rawBufferSize-32) {
+		if(rawBufferSize==0) {
+			rawBufferSize=0x10000;
+			rawBuffer=new int[rawBufferSize];
+		} else {
+			rawBufferSize*=2;
+			rawBuffer=Arrays.copyOf(rawBuffer,rawBufferSize);
+		}
+	}
         addedVertices++;
         if(drawMode == 7 && convertQuadsToTriangles && addedVertices % 4 == 0)
         {
@@ -278,11 +288,6 @@
         rawBuffer[rawBufferIndex + 2] = Float.floatToRawIntBits((float)(d2 + zOffset));
         rawBufferIndex += 8;
         vertexCount++;
-        if(vertexCount % 4 == 0 && rawBufferIndex >= bufferSize - 32)
-        {
-            draw();
-            isDrawing = true;
-        }
     }
 
     public void setColorOpaque_I(int i)
@@ -335,9 +340,7 @@
 
     private static boolean convertQuadsToTriangles = true;
     private static boolean tryVBO = false;
-    private ByteBuffer byteBuffer;
-    private IntBuffer intBuffer;
-    private FloatBuffer floatBuffer;
+    private static boolean useVBO = false;
     private int rawBuffer[];
     private int vertexCount;
     private double textureU;
@@ -350,16 +353,43 @@
     private int addedVertices;
     private boolean isColorDisabled;
     private int drawMode;
-    private double xOffset;
-    private double yOffset;
-    private double zOffset;
+    public double xOffset;
+    public double yOffset;
+    public double zOffset;
     private int normal;
-    public static final Tessellator instance = new Tessellator(0x200000);
     private boolean isDrawing;
-    private boolean useVBO;
-    private IntBuffer vertexBuffers;
     private int vboIndex;
-    private int vboCount;
-    private int bufferSize;
+
+    public static boolean renderingWorldRenderer=false;
+    public boolean defaultTexture=false;
+    private int rawBufferSize;
+    private static int vboCount;
+    private static IntBuffer vertexBuffers;
+    private static int nativeBufferSize;
+    private static int trivertsInBuffer;
+    private static ByteBuffer byteBuffer;
+    private static IntBuffer intBuffer;
+    private static FloatBuffer floatBuffer;
+    public static Tessellator instance;
+    public static Tessellator firstInstance;
+
+    static {
+	instance=new Tessellator();
+    	firstInstance=instance;
+	firstInstance.defaultTexture=true;
+
+        nativeBufferSize = 0x200000;
+	trivertsInBuffer = (nativeBufferSize/48)*6;
+        byteBuffer = GLAllocation.createDirectByteBuffer(nativeBufferSize * 4);
+        intBuffer = byteBuffer.asIntBuffer();
+        floatBuffer = byteBuffer.asFloatBuffer();
+        useVBO = tryVBO && GLContext.getCapabilities().GL_ARB_vertex_buffer_object;
+        vboCount = 10;
+        if(useVBO)
+        {
+            vertexBuffers = GLAllocation.createDirectIntBuffer(vboCount);
+            ARBVertexBufferObject.glGenBuffersARB(vertexBuffers);
+        }
+    }
 
 }
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/TileEntityFurnace.java ../src_work/minecraft/net/minecraft/src/TileEntityFurnace.java
--- ../src_base/minecraft/net/minecraft/src/TileEntityFurnace.java	2021-01-03 20:24:42.541678000 -0500
+++ ../src_work/minecraft/net/minecraft/src/TileEntityFurnace.java	2021-01-03 20:25:20.105970900 -0500
@@ -196,7 +196,7 @@
         {
             return false;
         }
-        ItemStack itemstack = FurnaceRecipes.smelting().getSmeltingResult(furnaceItemStacks[0].getItem().shiftedIndex);
+        ItemStack itemstack = FurnaceRecipes.smelting().getSmeltingResult(furnaceItemStacks[0]);
         if(itemstack == null)
         {
             return false;
@@ -222,12 +222,12 @@
         {
             return;
         }
-        ItemStack itemstack = FurnaceRecipes.smelting().getSmeltingResult(furnaceItemStacks[0].getItem().shiftedIndex);
+        ItemStack itemstack = FurnaceRecipes.smelting().getSmeltingResult(furnaceItemStacks[0]);
         if(furnaceItemStacks[2] == null)
         {
             furnaceItemStacks[2] = itemstack.copy();
         } else
-        if(furnaceItemStacks[2].itemID == itemstack.itemID)
+        if(furnaceItemStacks[2].isItemEqual(itemstack))
         {
             furnaceItemStacks[2].stackSize += itemstack.stackSize;
         }
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/TileEntityRendererPiston.java ../src_work/minecraft/net/minecraft/src/TileEntityRendererPiston.java
--- ../src_base/minecraft/net/minecraft/src/TileEntityRendererPiston.java	2021-01-03 20:24:42.572204600 -0500
+++ ../src_work/minecraft/net/minecraft/src/TileEntityRendererPiston.java	2021-01-03 20:25:20.108472900 -0500
@@ -4,6 +4,7 @@
 
 package net.minecraft.src;
 
+import net.minecraft.src.forge.ForgeHooksClient;
 import net.minecraft.client.Minecraft;
 import org.lwjgl.opengl.GL11;
 
@@ -38,6 +39,7 @@
             {
                 GL11.glShadeModel(7424 /*GL_FLAT*/);
             }
+	    ForgeHooksClient.beforeBlockRender(block,field_31071_b);
             tessellator.startDrawingQuads();
             tessellator.setTranslationD(((float)d - (float)tileentitypiston.xCoord) + tileentitypiston.func_31017_b(f), ((float)d1 - (float)tileentitypiston.yCoord) + tileentitypiston.func_31014_c(f), ((float)d2 - (float)tileentitypiston.zCoord) + tileentitypiston.func_31013_d(f));
             tessellator.setColorOpaque(1, 1, 1);
@@ -58,6 +60,7 @@
             }
             tessellator.setTranslationD(0.0D, 0.0D, 0.0D);
             tessellator.draw();
+	    ForgeHooksClient.afterBlockRender(block,field_31071_b);
             RenderHelper.enableStandardItemLighting();
         }
     }
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/World.java ../src_work/minecraft/net/minecraft/src/World.java
--- ../src_base/minecraft/net/minecraft/src/World.java	2021-01-03 20:24:42.672292000 -0500
+++ ../src_work/minecraft/net/minecraft/src/World.java	2021-01-03 20:25:20.112478200 -0500
@@ -313,7 +313,11 @@
 
     public boolean isAirBlock(int i, int j, int k)
     {
-        return getBlockId(i, j, k) == 0;
+    	int iBlockID = getBlockId( i, j, k );
+
+    	if ( iBlockID == 0 )
+    		return true;
+	return Block.blocksList[iBlockID].isAirBlock(this,i,j,k);
     }
 
     public boolean blockExists(int i, int j, int k)
@@ -1607,7 +1611,10 @@
                         if(j2 == Block.fire.blockID || j2 == Block.lavaMoving.blockID || j2 == Block.lavaStill.blockID)
                         {
                             return true;
-                        }
+                        } else {
+				if(j2>0 && Block.blocksList[j2].isBlockBurning(this,k1,l1,i2))
+					return true;
+			}
                     }
 
                 }
@@ -1900,7 +1907,19 @@
             return false;
         } else
         {
-            return block.blockMaterial.getIsTranslucent() && block.renderAsNormalBlock();
+            return block.blockMaterial.getIsTranslucent() && block.isBlockNormalCube(this, i, j, k);
+        }
+    }
+    
+    public boolean isBlockSolidOnSide(int i, int j, int k, int side)
+    {
+        Block block = Block.blocksList[getBlockId(i, j, k)];
+        if(block == null)
+        {
+            return false;
+        } else
+        {
+            return block.blockMaterial.getIsTranslucent() && block.isBlockSolidOnSide(this, i, j, k, side);
         }
     }
 
@@ -2425,6 +2444,7 @@
         {
             block = null;
         }
+	if(block!=null && block.isBlockReplaceable(this,j,k,l)) block=null;
         return i > 0 && block == null && block1.canPlaceBlockOnSide(this, j, k, l, i1);
     }
 
@@ -2913,7 +2933,7 @@
     public int field_27172_i;
     public boolean editingBlocks;
     private long lockTimestamp;
-    protected int autosavePeriod;
+    public int autosavePeriod;
     public int difficultySetting;
     public Random rand;
     public boolean isNewWorld;
diff -urN -r --strip-trailing-cr ../src_base/minecraft/net/minecraft/src/WorldRenderer.java ../src_work/minecraft/net/minecraft/src/WorldRenderer.java
--- ../src_base/minecraft/net/minecraft/src/WorldRenderer.java	2021-01-03 20:24:42.784387800 -0500
+++ ../src_work/minecraft/net/minecraft/src/WorldRenderer.java	2021-01-03 20:25:20.115479200 -0500
@@ -5,6 +5,9 @@
 package net.minecraft.src;
 
 import java.util.*;
+
+import net.minecraft.src.forge.ForgeHooksClient;
+
 import org.lwjgl.opengl.GL11;
 
 // Referenced classes of package net.minecraft.src:
@@ -125,8 +128,10 @@
                             GL11.glTranslatef((float)(-sizeDepth) / 2.0F, (float)(-sizeHeight) / 2.0F, (float)(-sizeDepth) / 2.0F);
                             GL11.glScalef(f, f, f);
                             GL11.glTranslatef((float)sizeDepth / 2.0F, (float)sizeHeight / 2.0F, (float)sizeDepth / 2.0F);
-                            tessellator.startDrawingQuads();
-                            tessellator.setTranslationD(-posX, -posY, -posZ);
+
+			    ForgeHooksClient.beforeRenderPass(i2);
+                            Tessellator.instance.startDrawingQuads();
+                            Tessellator.instance.setTranslationD(-posX, -posY, -posZ);
                         }
                         if(i2 == 0 && Block.isBlockContainer[i3])
                         {
@@ -136,17 +141,17 @@
                                 tileEntityRenderers.add(tileentity);
                             }
                         }
+
                         Block block = Block.blocksList[i3];
                         int j3 = block.getRenderBlockPass();
-                        if(j3 != i2)
-                        {
-                            flag = true;
-                            continue;
-                        }
-                        if(j3 == i2)
-                        {
-                            flag1 |= renderblocks.renderBlockByRenderType(block, l2, j2, k2);
-                        }
+			if(j3>i2) flag=true;
+
+			if(!ForgeHooksClient.canRenderInPass(block,i2))
+				continue;
+
+			ForgeHooksClient.beforeBlockRender(block, renderblocks);
+			flag1 |= renderblocks.renderBlockByRenderType(block, l2, j2, k2);
+			ForgeHooksClient.afterBlockRender(block, renderblocks);
                     }
 
                 }
@@ -155,10 +160,11 @@
 
             if(flag2)
             {
-                tessellator.draw();
+		ForgeHooksClient.afterRenderPass(i2);
+                Tessellator.instance.draw();
                 GL11.glPopMatrix();
                 GL11.glEndList();
-                tessellator.setTranslationD(0.0D, 0.0D, 0.0D);
+                Tessellator.instance.setTranslationD(0.0D, 0.0D, 0.0D);
             } else
             {
                 flag1 = false;
@@ -251,7 +257,6 @@
 
     public World worldObj;
     private int glRenderList;
-    private static Tessellator tessellator;
     public static int chunksUpdated = 0;
     public int posX;
     public int posY;
@@ -282,8 +287,4 @@
     public List tileEntityRenderers;
     private List tileEntities;
 
-    static 
-    {
-        tessellator = Tessellator.instance;
-    }
 }
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/server/MinecraftServ# ../src_work/minecraft_server/net/minecraft/server/MinecraftServ#
--- ../src_base/minecraft_server/net/minecraft/server/MinecraftServ#	2021-01-03 20:24:51.531408500 -0500
+++ ../src_work/minecraft_server/net/minecraft/server/MinecraftServ#	2021-01-03 20:25:20.120984300 -0500
@@ -1,5 +1,23 @@
 ***************
-*** 332,369 ****
+*** 445,450 ****
+                      interruptedexception1.printStackTrace();
+                  }
+              }
+              try
+              {
+                  func_6013_g();
+--- 445,453 ----
+                      interruptedexception1.printStackTrace();
+                  }
+              }
++         }
++         finally
++         {
+              try
+              {
+                  func_6013_g();
+***************
+*** 458,495 ****
               {
                   System.exit(0);
               }
@@ -38,7 +56,7 @@
       }
   
       private void func_6018_h()
---- 335,341 ----
+--- 461,467 ----
               {
                   System.exit(0);
               }
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/Block.java ../src_work/minecraft_server/net/minecraft/src/Block.java
--- ../src_base/minecraft_server/net/minecraft/src/Block.java	2021-01-03 20:24:51.813649000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/Block.java	2021-01-03 20:25:20.123486100 -0500
@@ -3,6 +3,7 @@
 // Decompiler options: packimports(3) braces deadcode 
 
 package net.minecraft.src;
+import net.minecraft.src.forge.ForgeHooks;
 
 import java.util.ArrayList;
 import java.util.Random;
@@ -215,25 +216,23 @@
     {
         return 1;
     }
+    
+    public int quantityDropped(int i, Random random)
+    {
+        return quantityDropped(random);
+    }
 
     public int idDropped(int i, Random random)
     {
         return blockID;
     }
 
+    /* FORGE: This function isn't called by Minecraft anymore.  Use
+     * blockStrength(EntityPlayer,int) instead.
+     */
     public float blockStrength(EntityPlayer entityplayer)
     {
-        if(blockHardness < 0.0F)
-        {
-            return 0.0F;
-        }
-        if(!entityplayer.canHarvestBlock(this))
-        {
-            return 1.0F / blockHardness / 100F;
-        } else
-        {
-            return entityplayer.getCurrentPlayerStrVsBlock(this) / blockHardness / 30F;
-        }
+	    return blockStrength(entityplayer,0);
     }
 
     public final void dropBlockAsItem(World world, int i, int j, int k, int l)
@@ -247,7 +246,7 @@
         {
             return;
         }
-        int i1 = quantityDropped(world.rand);
+        int i1 = quantityDropped(l, world.rand);
         for(int j1 = 0; j1 < i1; j1++)
         {
             if(world.rand.nextFloat() > f)
@@ -526,6 +525,80 @@
         return blockMaterial.getMaterialMobility();
     }
 
+    /* FORGE: Implement and return true if you wish this block to behave
+     * like a ladder when the player is inside.
+     */
+    public boolean isLadder() {
+	return false;
+    }
+
+    /* FORGE: Return true if the block is a normal, solid cube.  This
+     * determines indirect power state, entity ejection from blocks, and a few
+     * others.
+     */
+    public boolean isBlockNormalCube(World world, int i, int j, int k) {
+	    return blockMaterial.getIsOpaque() && isACube();
+    }
+
+    /* FORGE: Return true if the block is solid on the given side.  This
+     * is used by placement logic. */
+    public boolean isBlockSolidOnSide( World world, int i, int j, int k,
+		    int side ) {
+	    return isBlockNormalCube(world,i,j,k);
+    }
+
+    /* FORGE: Return true if the player can place a new block in the block
+     * occupied by this one, like water, lava, fire, etc.
+     */
+    public boolean isBlockReplaceable( World world, int i, int j, int k ) {
+	    return false;
+    }
+
+    /* FORGE: Return true if this block should set fire and deal fire damage
+     * to entities coming into contact with it, false otherwise.
+     */
+    public boolean isBlockBurning( World world, int i, int j, int k ) {
+	    return false;
+    }
+
+    /* FORGE: Return true if this block should be treated as an air block
+     * by the rest of the code, false otherwise.  This method is primarily
+     * useful for creating pure logic-blocks that will be invisible 
+     * to the player and otherwise interact as air would.  
+     */	
+    public boolean isAirBlock( World world, int i, int j, int k ) {
+	    return false;
+    }
+
+    /* FORGE: Return the block hardness with metadata 'md'.
+     */
+    public float getHardness(int md) {
+	    return blockHardness;
+    }
+
+    /* FORGE: Return the block strength of the block at i,j,k against the
+     * player.
+     */
+    public float blockStrength(World world, EntityPlayer player,
+		    int i, int j, int k) {
+	    int md=world.getBlockMetadata(i,j,k);
+	    return blockStrength(player,md);
+    }
+
+    /* FORGE: Return the block strength of a prototypical block with metadata
+     * 'md' against the player.
+     */
+    public float blockStrength(EntityPlayer player, int md) {
+	    return ForgeHooks.blockStrength(this,player,md);
+    }
+
+    /* FORGE: Return true if the player can harvest a prototypical block with
+     * metadata 'md'.
+     */
+    public boolean canHarvestBlock(EntityPlayer player, int md) {
+	    return ForgeHooks.canHarvestBlock(this,player,md);
+    }
+
     static Class _mthclass$(String s)
     {
         try
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/BlockButton.java ../src_work/minecraft_server/net/minecraft/src/BlockButton.java
--- ../src_base/minecraft_server/net/minecraft/src/BlockButton.java	2021-01-03 20:24:51.828161000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/BlockButton.java	2021-01-03 20:25:20.126989600 -0500
@@ -41,36 +41,36 @@
 
     public boolean canPlaceBlockOnSide(World world, int i, int j, int k, int l)
     {
-        if(l == 2 && world.isBlockNormalCube(i, j, k + 1))
+        if(l == 2 && world.isBlockSolidOnSide(i, j, k + 1,2))
         {
             return true;
         }
-        if(l == 3 && world.isBlockNormalCube(i, j, k - 1))
+        if(l == 3 && world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             return true;
         }
-        if(l == 4 && world.isBlockNormalCube(i + 1, j, k))
+        if(l == 4 && world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             return true;
         }
-        return l == 5 && world.isBlockNormalCube(i - 1, j, k);
+        return l == 5 && world.isBlockSolidOnSide(i - 1, j, k,5);
     }
 
     public boolean canPlaceBlockAt(World world, int i, int j, int k)
     {
-        if(world.isBlockNormalCube(i - 1, j, k))
+        if(world.isBlockSolidOnSide(i - 1, j, k,5))
         {
             return true;
         }
-        if(world.isBlockNormalCube(i + 1, j, k))
+        if(world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             return true;
         }
-        if(world.isBlockNormalCube(i, j, k - 1))
+        if(world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             return true;
         }
-        return world.isBlockNormalCube(i, j, k + 1);
+        return world.isBlockSolidOnSide(i, j, k + 1,2);
     }
 
     public void onBlockPlaced(World world, int i, int j, int k, int l)
@@ -78,19 +78,19 @@
         int i1 = world.getBlockMetadata(i, j, k);
         int j1 = i1 & 8;
         i1 &= 7;
-        if(l == 2 && world.isBlockNormalCube(i, j, k + 1))
+        if(l == 2 && world.isBlockSolidOnSide(i, j, k + 1,2))
         {
             i1 = 4;
         } else
-        if(l == 3 && world.isBlockNormalCube(i, j, k - 1))
+        if(l == 3 && world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             i1 = 3;
         } else
-        if(l == 4 && world.isBlockNormalCube(i + 1, j, k))
+        if(l == 4 && world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             i1 = 2;
         } else
-        if(l == 5 && world.isBlockNormalCube(i - 1, j, k))
+        if(l == 5 && world.isBlockSolidOnSide(i - 1, j, k,5))
         {
             i1 = 1;
         } else
@@ -102,19 +102,19 @@
 
     private int getOrientation(World world, int i, int j, int k)
     {
-        if(world.isBlockNormalCube(i - 1, j, k))
+        if(world.isBlockSolidOnSide(i - 1, j, k,5))
         {
             return 1;
         }
-        if(world.isBlockNormalCube(i + 1, j, k))
+        if(world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             return 2;
         }
-        if(world.isBlockNormalCube(i, j, k - 1))
+        if(world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             return 3;
         }
-        return !world.isBlockNormalCube(i, j, k + 1) ? 1 : 4;
+        return !world.isBlockSolidOnSide(i, j, k + 1,2) ? 1 : 4;
     }
 
     public void onNeighborBlockChange(World world, int i, int j, int k, int l)
@@ -123,19 +123,19 @@
         {
             int i1 = world.getBlockMetadata(i, j, k) & 7;
             boolean flag = false;
-            if(!world.isBlockNormalCube(i - 1, j, k) && i1 == 1)
+            if(!world.isBlockSolidOnSide(i - 1, j, k,5) && i1 == 1)
             {
                 flag = true;
             }
-            if(!world.isBlockNormalCube(i + 1, j, k) && i1 == 2)
+            if(!world.isBlockSolidOnSide(i + 1, j, k,4) && i1 == 2)
             {
                 flag = true;
             }
-            if(!world.isBlockNormalCube(i, j, k - 1) && i1 == 3)
+            if(!world.isBlockSolidOnSide(i, j, k - 1,3) && i1 == 3)
             {
                 flag = true;
             }
-            if(!world.isBlockNormalCube(i, j, k + 1) && i1 == 4)
+            if(!world.isBlockSolidOnSide(i, j, k + 1,2) && i1 == 4)
             {
                 flag = true;
             }
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/BlockChest.java ../src_work/minecraft_server/net/minecraft/src/BlockChest.java
--- ../src_base/minecraft_server/net/minecraft/src/BlockChest.java	2021-01-03 20:24:51.837671000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/BlockChest.java	2021-01-03 20:25:20.129491200 -0500
@@ -140,23 +140,23 @@
     public boolean blockActivated(World world, int i, int j, int k, EntityPlayer entityplayer)
     {
         Object obj = (TileEntityChest)world.getBlockTileEntity(i, j, k);
-        if(world.isBlockNormalCube(i, j + 1, k))
+        if(world.isBlockSolidOnSide(i, j + 1, k,0))
         {
             return true;
         }
-        if(world.getBlockId(i - 1, j, k) == blockID && world.isBlockNormalCube(i - 1, j + 1, k))
+        if(world.getBlockId(i - 1, j, k) == blockID && world.isBlockSolidOnSide(i - 1, j + 1, k,0))
         {
             return true;
         }
-        if(world.getBlockId(i + 1, j, k) == blockID && world.isBlockNormalCube(i + 1, j + 1, k))
+        if(world.getBlockId(i + 1, j, k) == blockID && world.isBlockSolidOnSide(i + 1, j + 1, k,0))
         {
             return true;
         }
-        if(world.getBlockId(i, j, k - 1) == blockID && world.isBlockNormalCube(i, j + 1, k - 1))
+        if(world.getBlockId(i, j, k - 1) == blockID && world.isBlockSolidOnSide(i, j + 1, k - 1,0))
         {
             return true;
         }
-        if(world.getBlockId(i, j, k + 1) == blockID && world.isBlockNormalCube(i, j + 1, k + 1))
+        if(world.getBlockId(i, j, k + 1) == blockID && world.isBlockSolidOnSide(i, j + 1, k + 1,0))
         {
             return true;
         }
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/BlockDoor.java ../src_work/minecraft_server/net/minecraft/src/BlockDoor.java
--- ../src_base/minecraft_server/net/minecraft/src/BlockDoor.java	2021-01-03 20:24:51.867196000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/BlockDoor.java	2021-01-03 20:25:20.131993100 -0500
@@ -167,7 +167,7 @@
                 world.setBlockWithNotify(i, j, k, 0);
                 flag = true;
             }
-            if(!world.isBlockNormalCube(i, j - 1, k))
+            if(!world.isBlockSolidOnSide(i, j - 1, k,1))
             {
                 world.setBlockWithNotify(i, j, k, 0);
                 flag = true;
@@ -230,7 +230,7 @@
             return false;
         } else
         {
-            return world.isBlockNormalCube(i, j - 1, k) && super.canPlaceBlockAt(world, i, j, k) && super.canPlaceBlockAt(world, i, j + 1, k);
+            return world.isBlockSolidOnSide(i, j - 1, k,1) && super.canPlaceBlockAt(world, i, j, k) && super.canPlaceBlockAt(world, i, j + 1, k);
         }
     }
 
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/BlockLadder.java ../src_work/minecraft_server/net/minecraft/src/BlockLadder.java
--- ../src_base/minecraft_server/net/minecraft/src/BlockLadder.java	2021-01-03 20:24:51.915738000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/BlockLadder.java	2021-01-03 20:25:20.134495300 -0500
@@ -40,6 +40,11 @@
         return super.getCollisionBoundingBoxFromPool(world, i, j, k);
     }
 
+    /* FORGE: Implemented base method, see Block.isLadder */
+    public boolean isLadder() {
+	return true;
+    }
+
     public boolean isOpaqueCube()
     {
         return false;
@@ -52,37 +57,37 @@
 
     public boolean canPlaceBlockAt(World world, int i, int j, int k)
     {
-        if(world.isBlockNormalCube(i - 1, j, k))
+        if(world.isBlockSolidOnSide(i - 1, j, k,5))
         {
             return true;
         }
-        if(world.isBlockNormalCube(i + 1, j, k))
+        if(world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             return true;
         }
-        if(world.isBlockNormalCube(i, j, k - 1))
+        if(world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             return true;
         }
-        return world.isBlockNormalCube(i, j, k + 1);
+        return world.isBlockSolidOnSide(i, j, k + 1,2);
     }
 
     public void onBlockPlaced(World world, int i, int j, int k, int l)
     {
         int i1 = world.getBlockMetadata(i, j, k);
-        if((i1 == 0 || l == 2) && world.isBlockNormalCube(i, j, k + 1))
+        if((i1 == 0 || l == 2) && world.isBlockSolidOnSide(i, j, k + 1,2))
         {
             i1 = 2;
         }
-        if((i1 == 0 || l == 3) && world.isBlockNormalCube(i, j, k - 1))
+        if((i1 == 0 || l == 3) && world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             i1 = 3;
         }
-        if((i1 == 0 || l == 4) && world.isBlockNormalCube(i + 1, j, k))
+        if((i1 == 0 || l == 4) && world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             i1 = 4;
         }
-        if((i1 == 0 || l == 5) && world.isBlockNormalCube(i - 1, j, k))
+        if((i1 == 0 || l == 5) && world.isBlockSolidOnSide(i - 1, j, k,5))
         {
             i1 = 5;
         }
@@ -93,19 +98,19 @@
     {
         int i1 = world.getBlockMetadata(i, j, k);
         boolean flag = false;
-        if(i1 == 2 && world.isBlockNormalCube(i, j, k + 1))
+        if(i1 == 2 && world.isBlockSolidOnSide(i, j, k + 1,2))
         {
             flag = true;
         }
-        if(i1 == 3 && world.isBlockNormalCube(i, j, k - 1))
+        if(i1 == 3 && world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             flag = true;
         }
-        if(i1 == 4 && world.isBlockNormalCube(i + 1, j, k))
+        if(i1 == 4 && world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             flag = true;
         }
-        if(i1 == 5 && world.isBlockNormalCube(i - 1, j, k))
+        if(i1 == 5 && world.isBlockSolidOnSide(i - 1, j, k,5))
         {
             flag = true;
         }
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/BlockLever.java ../src_work/minecraft_server/net/minecraft/src/BlockLever.java
--- ../src_base/minecraft_server/net/minecraft/src/BlockLever.java	2021-01-03 20:24:51.925745000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/BlockLever.java	2021-01-03 20:25:20.136997800 -0500
@@ -35,44 +35,44 @@
 
     public boolean canPlaceBlockOnSide(World world, int i, int j, int k, int l)
     {
-        if(l == 1 && world.isBlockNormalCube(i, j - 1, k))
+        if(l == 1 && world.isBlockSolidOnSide(i, j - 1, k,1))
         {
             return true;
         }
-        if(l == 2 && world.isBlockNormalCube(i, j, k + 1))
+        if(l == 2 && world.isBlockSolidOnSide(i, j, k + 1,2))
         {
             return true;
         }
-        if(l == 3 && world.isBlockNormalCube(i, j, k - 1))
+        if(l == 3 && world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             return true;
         }
-        if(l == 4 && world.isBlockNormalCube(i + 1, j, k))
+        if(l == 4 && world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             return true;
         }
-        return l == 5 && world.isBlockNormalCube(i - 1, j, k);
+        return l == 5 && world.isBlockSolidOnSide(i - 1, j, k,5);
     }
 
     public boolean canPlaceBlockAt(World world, int i, int j, int k)
     {
-        if(world.isBlockNormalCube(i - 1, j, k))
+        if(world.isBlockSolidOnSide(i - 1, j, k,5))
         {
             return true;
         }
-        if(world.isBlockNormalCube(i + 1, j, k))
+        if(world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             return true;
         }
-        if(world.isBlockNormalCube(i, j, k - 1))
+        if(world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             return true;
         }
-        if(world.isBlockNormalCube(i, j, k + 1))
+        if(world.isBlockSolidOnSide(i, j, k + 1,2))
         {
             return true;
         }
-        return world.isBlockNormalCube(i, j - 1, k);
+        return world.isBlockSolidOnSide(i, j - 1, k,1);
     }
 
     public void onBlockPlaced(World world, int i, int j, int k, int l)
@@ -81,23 +81,23 @@
         int j1 = i1 & 8;
         i1 &= 7;
         i1 = -1;
-        if(l == 1 && world.isBlockNormalCube(i, j - 1, k))
+        if(l == 1 && world.isBlockSolidOnSide(i, j - 1, k,1))
         {
             i1 = 5 + world.rand.nextInt(2);
         }
-        if(l == 2 && world.isBlockNormalCube(i, j, k + 1))
+        if(l == 2 && world.isBlockSolidOnSide(i, j, k + 1,2))
         {
             i1 = 4;
         }
-        if(l == 3 && world.isBlockNormalCube(i, j, k - 1))
+        if(l == 3 && world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             i1 = 3;
         }
-        if(l == 4 && world.isBlockNormalCube(i + 1, j, k))
+        if(l == 4 && world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             i1 = 2;
         }
-        if(l == 5 && world.isBlockNormalCube(i - 1, j, k))
+        if(l == 5 && world.isBlockSolidOnSide(i - 1, j, k,5))
         {
             i1 = 1;
         }
@@ -119,27 +119,27 @@
         {
             int i1 = world.getBlockMetadata(i, j, k) & 7;
             boolean flag = false;
-            if(!world.isBlockNormalCube(i - 1, j, k) && i1 == 1)
+            if(!world.isBlockSolidOnSide(i - 1, j, k,5) && i1 == 1)
             {
                 flag = true;
             }
-            if(!world.isBlockNormalCube(i + 1, j, k) && i1 == 2)
+            if(!world.isBlockSolidOnSide(i + 1, j, k,4) && i1 == 2)
             {
                 flag = true;
             }
-            if(!world.isBlockNormalCube(i, j, k - 1) && i1 == 3)
+            if(!world.isBlockSolidOnSide(i, j, k - 1,3) && i1 == 3)
             {
                 flag = true;
             }
-            if(!world.isBlockNormalCube(i, j, k + 1) && i1 == 4)
+            if(!world.isBlockSolidOnSide(i, j, k + 1,2) && i1 == 4)
             {
                 flag = true;
             }
-            if(!world.isBlockNormalCube(i, j - 1, k) && i1 == 5)
+            if(!world.isBlockSolidOnSide(i, j - 1, k,1) && i1 == 5)
             {
                 flag = true;
             }
-            if(!world.isBlockNormalCube(i, j - 1, k) && i1 == 6)
+            if(!world.isBlockSolidOnSide(i, j - 1, k,1) && i1 == 6)
             {
                 flag = true;
             }
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/BlockPressurePlate.java ../src_work/minecraft_server/net/minecraft/src/BlockPressurePlate.java
--- ../src_base/minecraft_server/net/minecraft/src/BlockPressurePlate.java	2021-01-03 20:24:51.974287000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/BlockPressurePlate.java	2021-01-03 20:25:20.140000100 -0500
@@ -46,7 +46,7 @@
 
     public boolean canPlaceBlockAt(World world, int i, int j, int k)
     {
-        return world.isBlockNormalCube(i, j - 1, k);
+        return world.isBlockSolidOnSide(i, j - 1, k,1);
     }
 
     public void onBlockAdded(World world, int i, int j, int k)
@@ -56,7 +56,7 @@
     public void onNeighborBlockChange(World world, int i, int j, int k, int l)
     {
         boolean flag = false;
-        if(!world.isBlockNormalCube(i, j - 1, k))
+        if(!world.isBlockSolidOnSide(i, j - 1, k,1))
         {
             flag = true;
         }
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/BlockRail.java ../src_work/minecraft_server/net/minecraft/src/BlockRail.java
--- ../src_base/minecraft_server/net/minecraft/src/BlockRail.java	2021-01-03 20:24:51.981294000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/BlockRail.java	2021-01-03 20:25:20.142502300 -0500
@@ -92,7 +92,7 @@
 
     public boolean canPlaceBlockAt(World world, int i, int j, int k)
     {
-        return world.isBlockNormalCube(i, j - 1, k);
+        return world.isBlockSolidOnSide(i, j - 1, k,1);
     }
 
     public void onBlockAdded(World world, int i, int j, int k)
@@ -116,23 +116,23 @@
             j1 &= 7;
         }
         boolean flag = false;
-        if(!world.isBlockNormalCube(i, j - 1, k))
+        if(!world.isBlockSolidOnSide(i, j - 1, k,1))
         {
             flag = true;
         }
-        if(j1 == 2 && !world.isBlockNormalCube(i + 1, j, k))
+        if(j1 == 2 && !world.isBlockSolidOnSide(i + 1, j, k,1))
         {
             flag = true;
         }
-        if(j1 == 3 && !world.isBlockNormalCube(i - 1, j, k))
+        if(j1 == 3 && !world.isBlockSolidOnSide(i - 1, j, k,1))
         {
             flag = true;
         }
-        if(j1 == 4 && !world.isBlockNormalCube(i, j, k - 1))
+        if(j1 == 4 && !world.isBlockSolidOnSide(i, j, k - 1,1))
         {
             flag = true;
         }
-        if(j1 == 5 && !world.isBlockNormalCube(i, j, k + 1))
+        if(j1 == 5 && !world.isBlockSolidOnSide(i, j, k + 1,1))
         {
             flag = true;
         }
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/BlockRedstoneRepeater.java ../src_work/minecraft_server/net/minecraft/src/BlockRedstoneRepeater.java
--- ../src_base/minecraft_server/net/minecraft/src/BlockRedstoneRepeater.java	2021-01-03 20:24:51.988300000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/BlockRedstoneRepeater.java	2021-01-03 20:25:20.145005100 -0500
@@ -27,7 +27,7 @@
 
     public boolean canPlaceBlockAt(World world, int i, int j, int k)
     {
-        if(!world.isBlockNormalCube(i, j - 1, k))
+        if(!world.isBlockSolidOnSide(i, j - 1, k,1))
         {
             return false;
         } else
@@ -38,7 +38,7 @@
 
     public boolean canBlockStay(World world, int i, int j, int k)
     {
-        if(!world.isBlockNormalCube(i, j - 1, k))
+        if(!world.isBlockSolidOnSide(i, j - 1, k,1))
         {
             return false;
         } else
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/BlockRedstoneWire.java ../src_work/minecraft_server/net/minecraft/src/BlockRedstoneWire.java
--- ../src_base/minecraft_server/net/minecraft/src/BlockRedstoneWire.java	2021-01-03 20:24:51.997307000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/BlockRedstoneWire.java	2021-01-03 20:25:20.147506600 -0500
@@ -3,6 +3,7 @@
 // Decompiler options: packimports(3) braces deadcode 
 
 package net.minecraft.src;
+import net.minecraft.src.forge.*;
 
 import java.util.*;
 
@@ -43,7 +44,7 @@
 
     public boolean canPlaceBlockAt(World world, int i, int j, int k)
     {
-        return world.isBlockNormalCube(i, j - 1, k);
+        return world.isBlockSolidOnSide(i, j - 1, k, 1);
     }
 
     private void updateAndPropagateCurrentStrength(World world, int i, int j, int k)
@@ -413,6 +414,10 @@
         {
             return false;
         }
+	if(Block.blocksList[i1] instanceof IConnectRedstone) {
+		IConnectRedstone icr=(IConnectRedstone)Block.blocksList[i1];
+		return icr.canConnectRedstone(iblockaccess,i,j,k,l);
+	}
         if(Block.blocksList[i1].canProvidePower())
         {
             return true;
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/BlockTorch.java ../src_work/minecraft_server/net/minecraft/src/BlockTorch.java
--- ../src_base/minecraft_server/net/minecraft/src/BlockTorch.java	2021-01-03 20:24:52.050854000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/BlockTorch.java	2021-01-03 20:25:20.150008600 -0500
@@ -36,24 +36,24 @@
 
     private boolean func_31028_g(World world, int i, int j, int k)
     {
-        return world.isBlockNormalCube(i, j, k) || world.getBlockId(i, j, k) == Block.fence.blockID;
+        return world.isBlockSolidOnSide(i, j, k,1) || world.getBlockId(i, j, k) == Block.fence.blockID;
     }
 
     public boolean canPlaceBlockAt(World world, int i, int j, int k)
     {
-        if(world.isBlockNormalCube(i - 1, j, k))
+        if(world.isBlockSolidOnSide(i - 1, j, k,5))
         {
             return true;
         }
-        if(world.isBlockNormalCube(i + 1, j, k))
+        if(world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             return true;
         }
-        if(world.isBlockNormalCube(i, j, k - 1))
+        if(world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             return true;
         }
-        if(world.isBlockNormalCube(i, j, k + 1))
+        if(world.isBlockSolidOnSide(i, j, k + 1,2))
         {
             return true;
         }
@@ -67,19 +67,19 @@
         {
             i1 = 5;
         }
-        if(l == 2 && world.isBlockNormalCube(i, j, k + 1))
+        if(l == 2 && world.isBlockSolidOnSide(i, j, k + 1,2))
         {
             i1 = 4;
         }
-        if(l == 3 && world.isBlockNormalCube(i, j, k - 1))
+        if(l == 3 && world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             i1 = 3;
         }
-        if(l == 4 && world.isBlockNormalCube(i + 1, j, k))
+        if(l == 4 && world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             i1 = 2;
         }
-        if(l == 5 && world.isBlockNormalCube(i - 1, j, k))
+        if(l == 5 && world.isBlockSolidOnSide(i - 1, j, k,5))
         {
             i1 = 1;
         }
@@ -97,19 +97,19 @@
 
     public void onBlockAdded(World world, int i, int j, int k)
     {
-        if(world.isBlockNormalCube(i - 1, j, k))
+        if(world.isBlockSolidOnSide(i - 1, j, k,5))
         {
             world.setBlockMetadataWithNotify(i, j, k, 1);
         } else
-        if(world.isBlockNormalCube(i + 1, j, k))
+        if(world.isBlockSolidOnSide(i + 1, j, k,4))
         {
             world.setBlockMetadataWithNotify(i, j, k, 2);
         } else
-        if(world.isBlockNormalCube(i, j, k - 1))
+        if(world.isBlockSolidOnSide(i, j, k - 1,3))
         {
             world.setBlockMetadataWithNotify(i, j, k, 3);
         } else
-        if(world.isBlockNormalCube(i, j, k + 1))
+        if(world.isBlockSolidOnSide(i, j, k + 1,2))
         {
             world.setBlockMetadataWithNotify(i, j, k, 4);
         } else
@@ -126,19 +126,19 @@
         {
             int i1 = world.getBlockMetadata(i, j, k);
             boolean flag = false;
-            if(!world.isBlockNormalCube(i - 1, j, k) && i1 == 1)
+            if(!world.isBlockSolidOnSide(i - 1, j, k,5) && i1 == 1)
             {
                 flag = true;
             }
-            if(!world.isBlockNormalCube(i + 1, j, k) && i1 == 2)
+            if(!world.isBlockSolidOnSide(i + 1, j, k,4) && i1 == 2)
             {
                 flag = true;
             }
-            if(!world.isBlockNormalCube(i, j, k - 1) && i1 == 3)
+            if(!world.isBlockSolidOnSide(i, j, k - 1,3) && i1 == 3)
             {
                 flag = true;
             }
-            if(!world.isBlockNormalCube(i, j, k + 1) && i1 == 4)
+            if(!world.isBlockSolidOnSide(i, j, k + 1,2) && i1 == 4)
             {
                 flag = true;
             }
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/BlockTrapDoor.java ../src_work/minecraft_server/net/minecraft/src/BlockTrapDoor.java
--- ../src_base/minecraft_server/net/minecraft/src/BlockTrapDoor.java	2021-01-03 20:24:52.054357000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/BlockTrapDoor.java	2021-01-03 20:25:20.152510800 -0500
@@ -130,7 +130,7 @@
         {
             j1--;
         }
-        if(!world.isBlockNormalCube(j1, j, k1))
+        if(!disableValidation && !world.isBlockSolidOnSide(j1, j, k1, (i1&3)+2))
         {
             world.setBlockWithNotify(i, j, k, 0);
             dropBlockAsItem(world, i, j, k, i1);
@@ -196,11 +196,15 @@
         {
             i--;
         }
-        return world.isBlockNormalCube(i, j, k);
+        return world.isBlockSolidOnSide(i, j, k,l);
     }
 
     public static boolean func_28038_d(int i)
     {
         return (i & 4) != 0;
     }
+
+    /* FORGE: Set this to allow trapdoors to remain free-floating
+     */
+    public static boolean disableValidation=false;
 }
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/Chunk.java ../src_work/minecraft_server/net/minecraft/src/Chunk.java
--- ../src_base/minecraft_server/net/minecraft/src/Chunk.java	2021-01-03 20:24:52.071371000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/Chunk.java	2021-01-03 20:25:20.155012900 -0500
@@ -3,6 +3,7 @@
 // Decompiler options: packimports(3) braces deadcode 
 
 package net.minecraft.src;
+import net.minecraft.src.forge.*;
 
 import java.io.PrintStream;
 import java.util.*;
@@ -227,6 +228,13 @@
         }
         int l1 = xPosition * 16 + i;
         int i2 = zPosition * 16 + k;
+
+	if(Block.blocksList[k1] instanceof IOverrideReplace) {
+		IOverrideReplace iovr=(IOverrideReplace)Block.blocksList[k1];
+		if(!iovr.canReplaceBlock(worldObj,l1,j,i2,l))
+			return iovr.getReplacedSuccess();
+	}
+
         blocks[i << 11 | k << 7 | j] = (byte)(byte0 & 0xff);
         if(k1 != 0 && !worldObj.singleplayerWorld)
         {
@@ -270,6 +278,13 @@
         }
         int k1 = xPosition * 16 + i;
         int l1 = zPosition * 16 + k;
+
+	if(Block.blocksList[j1] instanceof IOverrideReplace) {
+		IOverrideReplace iovr=(IOverrideReplace)Block.blocksList[j1];
+		if(!iovr.canReplaceBlock(worldObj,k1,j,l1,l))
+			return iovr.getReplacedSuccess();
+	}
+
         blocks[i << 11 | k << 7 | j] = (byte)(byte0 & 0xff);
         if(j1 != 0)
         {
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/EntityLiving.java ../src_work/minecraft_server/net/minecraft/src/EntityLiving.java
--- ../src_base/minecraft_server/net/minecraft/src/EntityLiving.java	2021-01-03 20:24:52.303572000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/EntityLiving.java	2021-01-03 20:25:20.158516400 -0500
@@ -532,7 +532,9 @@
         int i = MathHelper.floor_double(posX);
         int j = MathHelper.floor_double(boundingBox.minY);
         int k = MathHelper.floor_double(posZ);
-        return worldObj.getBlockId(i, j, k) == Block.ladder.blockID;
+	Block block=Block.blocksList[worldObj.getBlockId(i,j,k)];
+	if(block==null) return false;
+	return block.isLadder();
     }
 
     public void writeEntityToNBT(NBTTagCompound nbttagcompound)
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/EntityPlayer.java ../src_work/minecraft_server/net/minecraft/src/EntityPlayer.java
--- ../src_base/minecraft_server/net/minecraft/src/EntityPlayer.java	2021-01-03 20:24:52.346108000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/EntityPlayer.java	2021-01-03 20:25:20.161518700 -0500
@@ -6,6 +6,10 @@
 
 import java.util.*;
 
+import net.minecraft.src.forge.ArmorProperties;
+import net.minecraft.src.forge.ISpecialArmor;
+import net.minecraft.src.forge.ForgeHooks;
+
 // Referenced classes of package net.minecraft.src:
 //            EntityLiving, InventoryPlayer, ContainerPlayer, World, 
 //            ChunkCoordinates, DataWatcher, Container, StatList, 
@@ -296,6 +300,8 @@
         worldObj.entityJoinedWorld(entityitem);
     }
 
+    /* FORGE: This isn't called anymore
+     */
     public float getCurrentPlayerStrVsBlock(Block block)
     {
         float f = inventory.getStrVsBlock(block);
@@ -310,6 +316,24 @@
         return f;
     }
 
+    /* FORGE: Extended to allow metadata.
+     */
+    public float getCurrentPlayerStrVsBlock(Block block, int md)
+    {
+        float f = 1.0F;
+	ItemStack ist=inventory.getCurrentItem();
+	if(ist!=null) f=ist.getItem().getStrVsBlock(ist,block,md);
+        if(isInsideOfMaterial(Material.water))
+        {
+            f /= 5F;
+        }
+        if(!onGround)
+        {
+            f /= 5F;
+        }
+        return f;
+    }
+
     public boolean canHarvestBlock(Block block)
     {
         return inventory.canHarvestBlock(block);
@@ -457,6 +481,25 @@
 
     protected void damageEntity(int i)
     {
+    	 boolean doRegularComputation = true;
+         int initialDamage = i;
+         
+         for (ItemStack stack : inventory.armorInventory) {
+             if (stack != null && stack.getItem() instanceof ISpecialArmor) {
+                 ISpecialArmor armor = (ISpecialArmor) stack.getItem();
+                 
+                 ArmorProperties props = armor.getProperties(this, initialDamage, i);                            
+                 i = i - props.damageRemove;
+                 doRegularComputation = doRegularComputation
+                         && props.allowRegularComputation;
+             }
+         }
+         
+         if (!doRegularComputation) {
+             super.damageEntity(i);
+             return;
+         }
+        
         int j = 25 - inventory.getTotalArmorValue();
         int k = i * j + damageRemainder;
         inventory.damageArmor(i);
@@ -502,7 +545,9 @@
 
     public void destroyCurrentEquippedItem()
     {
+	ItemStack orig=inventory.getCurrentItem();
         inventory.setInventorySlotContents(inventory.currentItem, null);
+	ForgeHooks.onDestroyCurrentItem(this,orig);
     }
 
     public double getYOffset()
@@ -568,6 +613,10 @@
 
     public EnumStatus goToSleep(int i, int j, int k)
     {
+	EnumStatus customSleep = ForgeHooks.sleepInBedAt(this, i, j, k);
+	if (customSleep != null) {
+	    return customSleep;
+	}
         if(!worldObj.singleplayerWorld)
         {
             if(func_22057_E() || !isEntityAlive())
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/EntityTrackerEntry.java ../src_work/minecraft_server/net/minecraft/src/EntityTrackerEntry.java
--- ../src_base/minecraft_server/net/minecraft/src/EntityTrackerEntry.java	2021-01-03 20:24:52.392647000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/EntityTrackerEntry.java	2021-01-03 20:25:20.164522200 -0500
@@ -13,12 +13,12 @@
 //            Packet31RelEntityMove, Packet32EntityLook, Packet28EntityVelocity, Packet, 
 //            DataWatcher, Packet40EntityMetadata, EntityPlayerMP, NetServerHandler, 
 //            Packet29DestroyEntity, Packet5PlayerInventory, EntityPlayer, Packet17Sleep, 
-//            ModLoaderMp, EntityTrackerEntry2, Packet23VehicleSpawn, ModLoader, 
-//            EntityItem, Packet21PickupSpawn, Packet20NamedEntitySpawn, EntityMinecart, 
-//            EntityBoat, IAnimals, Packet24MobSpawn, EntityLiving, 
-//            EntityFish, EntityArrow, EntitySnowball, EntityFireball, 
-//            EntityEgg, EntityTNTPrimed, EntityFallingSand, Block, 
-//            EntityPainting, Packet25EntityPainting
+//            ModLoaderMp, ISpawnable, Packet230ModLoader, EntityTrackerEntry2, 
+//            Packet23VehicleSpawn, ModLoader, EntityItem, Packet21PickupSpawn, 
+//            Packet20NamedEntitySpawn, EntityMinecart, EntityBoat, IAnimals, 
+//            Packet24MobSpawn, EntityLiving, EntityFish, EntityArrow, 
+//            EntitySnowball, EntityFireball, EntityEgg, EntityTNTPrimed, 
+//            EntityFallingSand, Block, EntityPainting, Packet25EntityPainting
 
 public class EntityTrackerEntry
 {
@@ -238,6 +238,19 @@
         {
             try
             {
+                if(trackedEntity instanceof ISpawnable)
+                {
+                    Packet230ModLoader packet230modloader = ((ISpawnable)trackedEntity).getSpawnPacket();
+                    packet230modloader.modId = "Spawn".hashCode();
+                    if(entitytrackerentry2.entityId > 127)
+                    {
+                        packet230modloader.packetType = entitytrackerentry2.entityId - 256;
+                    } else
+                    {
+                        packet230modloader.packetType = entitytrackerentry2.entityId;
+                    }
+                    return packet230modloader;
+                }
                 if(!entitytrackerentry2.entityHasOwner)
                 {
                     return new Packet23VehicleSpawn(trackedEntity, entitytrackerentry2.entityId);
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/Explosion.java ../src_work/minecraft_server/net/minecraft/src/Explosion.java
--- ../src_base/minecraft_server/net/minecraft/src/Explosion.java	2021-01-03 20:24:52.437686000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/Explosion.java	2021-01-03 20:25:20.166523800 -0500
@@ -3,6 +3,7 @@
 // Decompiler options: packimports(3) braces deadcode 
 
 package net.minecraft.src;
+import net.minecraft.src.forge.ISpecialResistance;
 
 import java.util.*;
 
@@ -65,7 +66,16 @@
                         int i5 = worldObj.getBlockId(j4, k4, l4);
                         if(i5 > 0)
                         {
-                            f1 -= (Block.blocksList[i5].getExplosionResistance(exploder) + 0.3F) * f2;
+			    if(Block.blocksList[i5] instanceof ISpecialResistance) {
+				    ISpecialResistance isr=(ISpecialResistance)
+					   Block.blocksList[i5];
+				    f1-=(isr.getSpecialExplosionResistance(
+					worldObj,j4,k4,l4,
+					explosionX,explosionY,explosionZ,
+					exploder) + 0.3F) * f2;
+			    } else {
+				    f1 -= (Block.blocksList[i5].getExplosionResistance(exploder) + 0.3F) * f2;
+			    }
                         }
                         if(f1 > 0.0F)
                         {
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/FurnaceRecipes.java ../src_work/minecraft_server/net/minecraft/src/FurnaceRecipes.java
--- ../src_base/minecraft_server/net/minecraft/src/FurnaceRecipes.java	2021-01-03 20:24:52.441190000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/FurnaceRecipes.java	2021-01-03 20:25:20.169525600 -0500
@@ -4,6 +4,7 @@
 
 package net.minecraft.src;
 
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -13,6 +14,12 @@
 public class FurnaceRecipes
 {
 
+	private static final FurnaceRecipes smeltingBase = new FurnaceRecipes();
+    
+    /** The list of smelting results. */
+    private Map smeltingList;
+    private Map metaSmeltingList;
+	
     public static final FurnaceRecipes smelting()
     {
         return smeltingBase;
@@ -21,6 +28,7 @@
     private FurnaceRecipes()
     {
         smeltingList = new HashMap();
+        metaSmeltingList = new HashMap();
         addSmelting(Block.oreIron.blockID, new ItemStack(Item.ingotIron));
         addSmelting(Block.oreGold.blockID, new ItemStack(Item.ingotGold));
         addSmelting(Block.oreDiamond.blockID, new ItemStack(Item.diamond));
@@ -33,11 +41,19 @@
         addSmelting(Block.wood.blockID, new ItemStack(Item.coal, 1, 1));
     }
 
+    /**
+     * Adds a smelting recipe.
+     */
     public void addSmelting(int i, ItemStack itemstack)
     {
         smeltingList.put(Integer.valueOf(i), itemstack);
     }
 
+    /**
+     * Returns the smelting result of an item.
+     * Deprecated in favor of a metadata sensitive version
+     */
+    @Deprecated
     public ItemStack getSmeltingResult(int i)
     {
         return (ItemStack)smeltingList.get(Integer.valueOf(i));
@@ -48,7 +64,34 @@
         return smeltingList;
     }
 
-    private static final FurnaceRecipes smeltingBase = new FurnaceRecipes();
-    private Map smeltingList;
-
+    /**
+     * Add a metadata-sensitive furnace recipe
+     * @param itemID The Item ID
+     * @param metadata The Item Metadata
+     * @param itemstack The ItemStack for the result
+     */
+    public void addSmelting(int itemID, int metadata, ItemStack itemstack)
+    {
+        metaSmeltingList.put(Arrays.asList(itemID, metadata), itemstack);
+    }
+    
+    /**
+     * Used to get the resulting ItemStack form a source ItemStack
+     * @param item The Source ItemStack
+     * @return The result ItemStack
+     */
+    public ItemStack getSmeltingResult(ItemStack item) 
+    {
+        if (item == null)
+        {
+            return null;
+        }
+        ItemStack ret = (ItemStack)metaSmeltingList.get(Arrays.asList(item.itemID, item.getItemDamage()));
+        if (ret != null) 
+        {
+            return ret;
+        }
+        return (ItemStack)smeltingList.get(Integer.valueOf(item.itemID));
+    }
+    
 }
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/ISpawnable.java ../src_work/minecraft_server/net/minecraft/src/ISpawnable.java
--- ../src_base/minecraft_server/net/minecraft/src/ISpawnable.java	1969-12-31 19:00:00.000000000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/ISpawnable.java	2021-01-03 20:25:20.173028900 -0500
@@ -0,0 +1,15 @@
+// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
+// Jad home page: http://www.kpdus.com/jad.html
+// Decompiler options: packimports(3) braces deadcode 
+
+package net.minecraft.src;
+
+
+// Referenced classes of package net.minecraft.src:
+//            Packet230ModLoader
+
+public interface ISpawnable
+{
+
+    public abstract Packet230ModLoader getSpawnPacket();
+}
\ No newline at end of file
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/Item.java ../src_work/minecraft_server/net/minecraft/src/Item.java
--- ../src_base/minecraft_server/net/minecraft/src/Item.java	2021-01-03 20:24:52.521258000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/Item.java	2021-01-03 20:25:20.176531800 -0500
@@ -65,6 +65,13 @@
         return 1.0F;
     }
 
+    /* FORGE: Metadata-sensitive version of getStrVsBlock
+     */
+    public float getStrVsBlock(ItemStack itemstack, Block block, int md)
+    {
+	    return getStrVsBlock(itemstack,block);
+    }
+
     public ItemStack onItemRightClick(ItemStack itemstack, World world, EntityPlayer entityplayer)
     {
         return itemstack;
@@ -187,6 +194,27 @@
     {
         return false;
     }
+    
+    /* =========================================================== FORGE START ===============================================================*/
+
+    /**
+     * Called before a block is broken.  Return true to prevent default block harvesting.
+     *
+     * Note: In SMP, this is called on both client and server sides!
+     * 
+     * @param itemstack The current ItemStack
+     * @param X The X Position
+     * @param Y The X Position
+     * @param Z The X Position
+     * @param player The Player that is wielding the item
+     * @return True to prevent harvesting, false to continue as normal
+     */
+    public boolean onBlockStartBreak(ItemStack itemstack, int X, int Y, int Z, EntityPlayer player) 
+    {
+        return false;
+    }
+
+    /* ===========================================================  FORGE END  ===============================================================*/
 
     protected static Random itemRand = new Random();
     public static Item itemsList[] = new Item[32000];
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/ItemBucket.java ../src_work/minecraft_server/net/minecraft/src/ItemBucket.java
--- ../src_base/minecraft_server/net/minecraft/src/ItemBucket.java	2021-01-03 20:24:52.544278000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/ItemBucket.java	2021-01-03 20:25:20.179034000 -0500
@@ -6,6 +6,8 @@
 
 import java.util.Random;
 
+import net.minecraft.src.forge.MinecraftForge;
+
 // Referenced classes of package net.minecraft.src:
 //            Item, EntityPlayer, Vec3D, MathHelper, 
 //            World, MovingObjectPosition, EnumMovingObjectType, Material, 
@@ -55,6 +57,13 @@
             }
             if(isFull == 0)
             {
+                ItemStack customBucket = MinecraftForge.fillCustomBucket(world,
+                        i, j, k);
+            	
+            	if (customBucket != null) {
+            		return customBucket;
+            	}
+
                 if(world.getBlockMaterial(i, j, k) == Material.water && world.getBlockMetadata(i, j, k) == 0)
                 {
                     world.setBlockWithNotify(i, j, k, 0);
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/ItemInWorldManager.java ../src_work/minecraft_server/net/minecraft/src/ItemInWorldManager.java
--- ../src_base/minecraft_server/net/minecraft/src/ItemInWorldManager.java	2021-01-03 20:24:52.588817000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/ItemInWorldManager.java	2021-01-03 20:25:20.181535700 -0500
@@ -3,6 +3,7 @@
 // Decompiler options: packimports(3) braces deadcode 
 
 package net.minecraft.src;
+import net.minecraft.src.forge.*;
 
 
 // Referenced classes of package net.minecraft.src:
@@ -29,7 +30,8 @@
             if(j != 0)
             {
                 Block block = Block.blocksList[j];
-                float f = block.blockStrength(thisPlayer) * (float)(i + 1);
+                float f = block.blockStrength(thisWorld,thisPlayer,
+			field_22049_l,field_22048_m,field_22047_n) * (float)(i + 1);
                 if(f >= 1.0F)
                 {
                     field_22050_k = false;
@@ -51,7 +53,7 @@
         {
             Block.blocksList[i1].onBlockClicked(thisWorld, i, j, k, thisPlayer);
         }
-        if(i1 > 0 && Block.blocksList[i1].blockStrength(thisPlayer) >= 1.0F)
+        if(i1 > 0 && Block.blocksList[i1].blockStrength(thisWorld,thisPlayer,i,j,k) >= 1.0F)
         {
             func_325_c(i, j, k);
         } else
@@ -71,7 +73,7 @@
             if(i1 != 0)
             {
                 Block block = Block.blocksList[i1];
-                float f = block.blockStrength(thisPlayer) * (float)(l + 1);
+                float f = block.blockStrength(thisWorld,thisPlayer,i,j,k) * (float)(l + 1);
                 if(f >= 0.7F)
                 {
                     func_325_c(i, j, k);
@@ -101,8 +103,14 @@
         return flag;
     }
 
+    // blockHarvessted - TYPO IS INTENTIONAL
     public boolean func_325_c(int i, int j, int k)
     {
+    	ItemStack stack = thisPlayer.getCurrentEquippedItem();
+        if (stack != null && stack.getItem().onBlockStartBreak(stack, i, j, k, thisPlayer))
+        {
+            return false;
+        }
         int l = thisWorld.getBlockId(i, j, k);
         int i1 = thisWorld.getBlockMetadata(i, j, k);
         thisWorld.func_28101_a(thisPlayer, 2001, i, j, k, l + thisWorld.getBlockMetadata(i, j, k) * 256);
@@ -117,7 +125,7 @@
                 thisPlayer.destroyCurrentEquippedItem();
             }
         }
-        if(flag && thisPlayer.canHarvestBlock(Block.blocksList[l]))
+        if(flag && Block.blocksList[l].canHarvestBlock(thisPlayer,i1))
         {
             Block.blocksList[l].harvestBlock(thisWorld, thisPlayer, i, j, k, i1);
             ((EntityPlayerMP)thisPlayer).playerNetServerHandler.sendPacket(new Packet53BlockChange(i, j, k, thisWorld));
@@ -135,6 +143,7 @@
             if(itemstack1.stackSize == 0)
             {
                 entityplayer.inventory.mainInventory[entityplayer.inventory.currentItem] = null;
+		ForgeHooks.onDestroyCurrentItem(entityplayer,itemstack1);
             }
             return true;
         } else
@@ -145,6 +154,11 @@
 
     public boolean activeBlockOrUseItem(EntityPlayer entityplayer, World world, ItemStack itemstack, int i, int j, int k, int l)
     {
+	if(itemstack!=null && itemstack.getItem() instanceof IUseItemFirst) {
+		IUseItemFirst iuif=(IUseItemFirst)itemstack.getItem();
+		if(iuif.onItemUseFirst(itemstack,entityplayer,world,i,j,k,l))
+			return true;
+	}
         int i1 = world.getBlockId(i, j, k);
         if(i1 > 0 && Block.blocksList[i1].blockActivated(world, i, j, k, entityplayer))
         {
@@ -155,7 +169,11 @@
             return false;
         } else
         {
-            return itemstack.useItem(entityplayer, world, i, j, k, l);
+            if(!itemstack.useItem(entityplayer, world, i, j, k, l))
+		    return false;
+            if(itemstack.stackSize == 0)
+		ForgeHooks.onDestroyCurrentItem(entityplayer,itemstack);
+	    return true;
         }
     }
 
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/ItemShears.java ../src_work/minecraft_server/net/minecraft/src/ItemShears.java
--- ../src_base/minecraft_server/net/minecraft/src/ItemShears.java	2021-01-03 20:24:52.635356000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/ItemShears.java	2021-01-03 20:25:20.184039100 -0500
@@ -4,6 +4,9 @@
 
 package net.minecraft.src;
 
+import java.util.ArrayList;
+
+import net.minecraft.src.forge.IShearable;
 
 // Referenced classes of package net.minecraft.src:
 //            Item, Block, BlockLeaves, ItemStack, 
@@ -47,4 +50,63 @@
             return super.getStrVsBlock(itemstack, block);
         }
     }
+    
+    @Override
+    public void saddleEntity(ItemStack itemstack, EntityLiving entity)
+    {
+        if (entity.worldObj.singleplayerWorld)
+        {
+            return;
+        }
+        if (entity instanceof IShearable)
+        {
+            IShearable target = (IShearable)entity;
+            if (target.isShearable(itemstack, entity.worldObj, (int)entity.posX, (int)entity.posY, (int)entity.posZ))
+            {
+                ArrayList<ItemStack> drops = target.onSheared(itemstack, entity.worldObj, (int)entity.posX, (int)entity.posY, (int)entity.posZ);
+                for(ItemStack stack : drops)
+                {
+                    EntityItem ent = entity.entityDropItem(stack, 1.0F);
+                    ent.motionY += entity.rand.nextFloat() * 0.05F;
+                    ent.motionX += (entity.rand.nextFloat() - entity.rand.nextFloat()) * 0.1F;
+                    ent.motionZ += (entity.rand.nextFloat() - entity.rand.nextFloat()) * 0.1F;
+                }
+                itemstack.damageItem(1, entity);
+            }
+        }
+    }
+    
+    @Override
+     public boolean onBlockStartBreak(ItemStack itemstack, int X, int Y, int Z, EntityPlayer player) 
+     {
+    	
+        if (player.worldObj.singleplayerWorld)
+        {
+            return false;
+        }
+        
+        int id = player.worldObj.getBlockId(X, Y, Z);
+        
+        if ((Block.blocksList[id] != null && Block.blocksList[id] instanceof IShearable))
+        {
+            IShearable target = (IShearable)Block.blocksList[id];
+            if (target.isShearable(itemstack, player.worldObj, X, Y, Z))
+            {
+                ArrayList<ItemStack> drops = target.onSheared(itemstack, player.worldObj, X, Y, Z);
+                for(ItemStack stack : drops)
+                {
+                    float f = 0.7F;
+                    double d  = (double)(player.rand.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
+                    double d1 = (double)(player.rand.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
+                    double d2 = (double)(player.rand.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
+                    EntityItem entityitem = new EntityItem(player.worldObj, (double)X + d, (double)Y + d1, (double)Z + d2, stack);
+                    entityitem.delayBeforeCanPickup = 10;
+                    player.worldObj.entityJoinedWorld(entityitem);
+                }
+                itemstack.damageItem(1, player);
+                player.addStat(StatList.mineBlockStatArray[id], 1);
+            }
+        }
+        return false;
+     }
 }
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/ItemTool.java ../src_work/minecraft_server/net/minecraft/src/ItemTool.java
--- ../src_base/minecraft_server/net/minecraft/src/ItemTool.java	2021-01-03 20:24:52.662379000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/ItemTool.java	2021-01-03 20:25:20.187041900 -0500
@@ -4,6 +4,8 @@
 
 package net.minecraft.src;
 
+import java.util.Arrays;
+import net.minecraft.src.forge.ForgeHooks;
 
 // Referenced classes of package net.minecraft.src:
 //            Item, EnumToolMaterial, ItemStack, Block, 
@@ -37,6 +39,14 @@
         return 1.0F;
     }
 
+    /* FORGE: Overridden to allow custom tool effectiveness
+     */
+    public float getStrVsBlock(ItemStack itemstack, Block block, int md) {
+	    if(ForgeHooks.isToolEffective(itemstack,block,md))
+                return efficiencyOnProperMaterial;
+	    return getStrVsBlock(itemstack,block);
+    }
+
     public boolean hitEntity(ItemStack itemstack, EntityLiving entityliving, EntityLiving entityliving1)
     {
         itemstack.damageItem(2, entityliving1);
@@ -55,7 +65,7 @@
     }
 
     private Block blocksEffectiveAgainst[];
-    private float efficiencyOnProperMaterial;
-    private int damageVsEntity;
+    public float efficiencyOnProperMaterial;
+    public int damageVsEntity;
     protected EnumToolMaterial toolMaterial;
 }
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/mod_Reforged.java ../src_work/minecraft_server/net/minecraft/src/mod_Reforged.java
--- ../src_base/minecraft_server/net/minecraft/src/mod_Reforged.java	1969-12-31 19:00:00.000000000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/mod_Reforged.java	2021-01-03 20:25:20.208559700 -0500
@@ -0,0 +1,40 @@
+/**
+ * This software is provided under the terms of the Minecraft Forge Public 
+ * License v1.0.
+ */
+
+package net.minecraft.src;
+
+import net.minecraft.src.forge.ForgeHooks;
+import net.minecraft.src.reforged.IReachEntity;
+import net.minecraft.src.reforged.Reforged;
+import net.minecraft.src.reforged.ReforgedHooks;
+
+public class mod_Reforged extends BaseModMp implements IReachEntity {
+
+	final boolean testEnabled = false;
+	
+	public mod_Reforged() {
+		if (testEnabled)
+			Reforged.reachAdd(this);
+	}
+	
+	@Override
+	public String Version() {
+		return String.format("[Forge %d.%d.%d, Reforged %d.%d.%d]",
+                ForgeHooks.majorVersion,    	ForgeHooks.minorVersion, 	ForgeHooks.revisionVersion, 
+                ReforgedHooks.majorVersion,    	ReforgedHooks.minorVersion, ReforgedHooks.revisionVersion
+                );
+	}
+
+	@Override
+	public boolean reachEntityItemMatches(ItemStack itemstack) {
+		return testEnabled;
+	}
+
+	@Override
+	public float getReachEntity(ItemStack itemstack) {
+		return 100f;
+	}
+
+}
\ No newline at end of file
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/MovingObjectPosition.java ../src_work/minecraft_server/net/minecraft/src/MovingObjectPosition.java
--- ../src_base/minecraft_server/net/minecraft/src/MovingObjectPosition.java	2021-01-03 20:24:52.760462000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/MovingObjectPosition.java	2021-01-03 20:25:20.189543200 -0500
@@ -35,4 +35,7 @@
     public int sideHit;
     public Vec3D hitVec;
     public Entity entityHit;
+
+    // Added for RedPower subblocks.
+    public int subHit=-1;
 }
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/NetServerHandler.java ../src_work/minecraft_server/net/minecraft/src/NetServerHandler.java
--- ../src_base/minecraft_server/net/minecraft/src/NetServerHandler.java	2021-01-03 20:24:52.826020000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/NetServerHandler.java	2021-01-03 20:25:20.192546100 -0500
@@ -8,6 +8,7 @@
 import java.util.*;
 import java.util.logging.Logger;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.src.reforged.Reforged;
 
 // Referenced classes of package net.minecraft.src:
 //            NetHandler, ICommandListener, NetworkManager, EntityPlayerMP, 
@@ -531,7 +532,9 @@
     {
         WorldServer worldserver = mcServer.getWorldManager(playerEntity.dimension);
         Entity entity = worldserver.func_6158_a(packet7useentity.targetEntity);
-        if(entity != null && playerEntity.canEntityBeSeen(entity) && playerEntity.getDistanceSqToEntity(entity) < 36D)
+        double distance = Reforged.reachGetEntityPlayer(playerEntity);
+        distance = distance * distance;
+        if(entity != null && playerEntity.canEntityBeSeen(entity) && playerEntity.getDistanceSqToEntity(entity) <= distance)
         {
             if(packet7useentity.isLeftClick == 0)
             {
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/PlayerInstance.java ../src_work/minecraft_server/net/minecraft/src/PlayerInstance.java
--- ../src_base/minecraft_server/net/minecraft/src/PlayerInstance.java	2021-01-03 20:24:53.112265000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/PlayerInstance.java	2021-01-03 20:25:20.195548900 -0500
@@ -169,12 +169,11 @@
             sendPacketToPlayersInInstance(new Packet52MultiBlockChange(chunkX, chunkZ, blocksToUpdate, numBlocksToUpdate, worldserver));
             for(int k = 0; k < numBlocksToUpdate; k++)
             {
-                int j1 = chunkX * 16 + (numBlocksToUpdate >> 12 & 0xf);
-                int i2 = numBlocksToUpdate & 0xff;
-                int k2 = chunkZ * 16 + (numBlocksToUpdate >> 8 & 0xf);
+                int j1 = chunkX * 16 + (blocksToUpdate[k] >> 12 & 0xf);
+                int i2 = blocksToUpdate[k] & 0xff;
+                int k2 = chunkZ * 16 + (blocksToUpdate[k] >> 8 & 0xf);
                 if(Block.isBlockContainer[worldserver.getBlockId(j1, i2, k2)])
                 {
-                    System.out.println("Sending!");
                     updateTileEntity(worldserver.getBlockTileEntity(j1, i2, k2));
                 }
             }
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/SlotCrafting.java ../src_work/minecraft_server/net/minecraft/src/SlotCrafting.java
--- ../src_base/minecraft_server/net/minecraft/src/SlotCrafting.java	2021-01-03 20:24:53.227865000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/SlotCrafting.java	2021-01-03 20:25:20.198050200 -0500
@@ -3,6 +3,7 @@
 // Decompiler options: packimports(3) braces deadcode 
 
 package net.minecraft.src;
+import net.minecraft.src.forge.ForgeHooks;
 
 
 // Referenced classes of package net.minecraft.src:
@@ -60,6 +61,7 @@
             field_25004_e.addStat(AchievementList.field_27101_r, 1);
         }
         ModLoader.TakenFromCrafting(field_25004_e, itemstack);
+	ForgeHooks.onTakenFromCrafting(field_25004_e, itemstack, craftMatrix);
         for(int i = 0; i < craftMatrix.getSizeInventory(); i++)
         {
             ItemStack itemstack1 = craftMatrix.getStackInSlot(i);
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/TileEntityFurnace.java ../src_work/minecraft_server/net/minecraft/src/TileEntityFurnace.java
--- ../src_base/minecraft_server/net/minecraft/src/TileEntityFurnace.java	2021-01-03 20:24:53.318943000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/TileEntityFurnace.java	2021-01-03 20:25:20.201052500 -0500
@@ -7,8 +7,8 @@
 
 // Referenced classes of package net.minecraft.src:
 //            TileEntity, IInventory, ItemStack, NBTTagCompound, 
-//            NBTTagList, World, BlockFurnace, FurnaceRecipes, 
-//            Item, Block, Material, ModLoader, 
+//            NBTTagList, World, Item, BlockFurnace, 
+//            FurnaceRecipes, Block, Material, ModLoader, 
 //            EntityPlayer
 
 public class TileEntityFurnace extends TileEntity
@@ -114,6 +114,20 @@
         return 64;
     }
 
+    public int getCookProgressScaled(int i)
+    {
+        return (furnaceCookTime * i) / 200;
+    }
+
+    public int getBurnTimeRemainingScaled(int i)
+    {
+        if(currentItemBurnTime == 0)
+        {
+            currentItemBurnTime = 200;
+        }
+        return (furnaceBurnTime * i) / currentItemBurnTime;
+    }
+
     public boolean isBurning()
     {
         return furnaceBurnTime > 0;
@@ -127,7 +141,7 @@
         {
             furnaceBurnTime--;
         }
-        if(!worldObj.singleplayerWorld)
+        if(true)
         {
             if(furnaceBurnTime == 0 && canSmelt())
             {
@@ -137,7 +151,13 @@
                     flag1 = true;
                     if(furnaceItemStacks[1] != null)
                     {
-                        furnaceItemStacks[1].stackSize--;
+                        if(furnaceItemStacks[1].getItem().hasContainerItem())
+                        {
+                            furnaceItemStacks[1] = new ItemStack(furnaceItemStacks[1].getItem().getContainerItem());
+                        } else
+                        {
+                            furnaceItemStacks[1].stackSize--;
+                        }
                         if(furnaceItemStacks[1].stackSize == 0)
                         {
                             furnaceItemStacks[1] = null;
@@ -176,7 +196,7 @@
         {
             return false;
         }
-        ItemStack itemstack = FurnaceRecipes.smelting().getSmeltingResult(furnaceItemStacks[0].getItem().shiftedIndex);
+        ItemStack itemstack = FurnaceRecipes.smelting().getSmeltingResult(furnaceItemStacks[0]);
         if(itemstack == null)
         {
             return false;
@@ -192,10 +212,8 @@
         if(furnaceItemStacks[2].stackSize < getInventoryStackLimit() && furnaceItemStacks[2].stackSize < furnaceItemStacks[2].getMaxStackSize())
         {
             return true;
-        } else
-        {
-            return furnaceItemStacks[2].stackSize < itemstack.getMaxStackSize();
         }
+        return furnaceItemStacks[2].stackSize < itemstack.getMaxStackSize();
     }
 
     public void smeltItem()
@@ -204,16 +222,22 @@
         {
             return;
         }
-        ItemStack itemstack = FurnaceRecipes.smelting().getSmeltingResult(furnaceItemStacks[0].getItem().shiftedIndex);
+        ItemStack itemstack = FurnaceRecipes.smelting().getSmeltingResult(furnaceItemStacks[0]);
         if(furnaceItemStacks[2] == null)
         {
             furnaceItemStacks[2] = itemstack.copy();
         } else
-        if(furnaceItemStacks[2].itemID == itemstack.itemID)
+        if(furnaceItemStacks[2].isItemEqual(itemstack))
+        {
+            furnaceItemStacks[2].stackSize += itemstack.stackSize;
+        }
+        if(furnaceItemStacks[0].getItem().hasContainerItem())
+        {
+            furnaceItemStacks[0] = new ItemStack(furnaceItemStacks[0].getItem().getContainerItem());
+        } else
         {
-            furnaceItemStacks[2].stackSize++;
+            furnaceItemStacks[0].stackSize--;
         }
-        furnaceItemStacks[0].stackSize--;
         if(furnaceItemStacks[0].stackSize <= 0)
         {
             furnaceItemStacks[0] = null;
@@ -242,9 +266,13 @@
         if(i == Item.bucketLava.shiftedIndex)
         {
             return 20000;
+        }
+        if(i == Block.sapling.blockID)
+        {
+            return 100;
         } else
         {
-            return i == Block.sapling.blockID ? 100 : ModLoader.AddAllFuel(i);
+            return ModLoader.AddAllFuel(i);
         }
     }
 
@@ -253,10 +281,8 @@
         if(worldObj.getBlockTileEntity(xCoord, yCoord, zCoord) != this)
         {
             return false;
-        } else
-        {
-            return entityplayer.getDistanceSq((double)xCoord + 0.5D, (double)yCoord + 0.5D, (double)zCoord + 0.5D) <= 64D;
         }
+        return entityplayer.getDistanceSq((double)xCoord + 0.5D, (double)yCoord + 0.5D, (double)zCoord + 0.5D) <= 64D;
     }
 
     private ItemStack furnaceItemStacks[];
diff -urN -r --strip-trailing-cr ../src_base/minecraft_server/net/minecraft/src/World.java ../src_work/minecraft_server/net/minecraft/src/World.java
--- ../src_base/minecraft_server/net/minecraft/src/World.java	2021-01-03 20:24:53.406018000 -0500
+++ ../src_work/minecraft_server/net/minecraft/src/World.java	2021-01-03 20:25:20.205556300 -0500
@@ -166,7 +166,11 @@
 
     public boolean isAirBlock(int i, int j, int k)
     {
-        return getBlockId(i, j, k) == 0;
+    	int iBlockID = getBlockId( i, j, k );
+
+    	if ( iBlockID == 0 )
+    		return true;
+	return Block.blocksList[iBlockID].isAirBlock(this,i,j,k);
     }
 
     public boolean blockExists(int i, int j, int k)
@@ -1408,7 +1412,10 @@
                         if(j2 == Block.fire.blockID || j2 == Block.lavaMoving.blockID || j2 == Block.lavaStill.blockID)
                         {
                             return true;
-                        }
+                        } else {
+				if(j2>0 && Block.blocksList[j2].isBlockBurning(this,k1,l1,i2))
+					return true;
+			}
                     }
 
                 }
@@ -1681,13 +1688,18 @@
     public boolean isBlockNormalCube(int i, int j, int k)
     {
         Block block = Block.blocksList[getBlockId(i, j, k)];
-        if(block == null)
-        {
-            return false;
-        } else
-        {
-            return block.blockMaterial.getIsOpaque() && block.isACube();
-        }
+        if(block == null) return false;
+	return block.isBlockNormalCube(this,i,j,k);
+    }
+
+    /* FORGE: Determine if the given block is considered solid on the
+     * specified side.  Used by placement logic.
+     */
+    public boolean isBlockSolidOnSide(int i, int j, int k, int side)
+    {
+        Block block = Block.blocksList[getBlockId(i, j, k)];
+        if(block == null) return false;
+	return block.isBlockSolidOnSide(this,i,j,k,side);
     }
 
     public boolean func_6156_d()
@@ -2178,6 +2190,7 @@
         {
             block = null;
         }
+	if(block!=null && block.isBlockReplaceable(this,j,k,l)) block=null;
         return i > 0 && block == null && block1.canPlaceBlockOnSide(this, j, k, l, i1);
     }
 
@@ -2601,7 +2614,7 @@
     public int field_27080_i;
     public boolean editingBlocks;
     private long lockTimestamp;
-    protected int autosavePeriod;
+    public int autosavePeriod;
     public int difficultySetting;
     public Random rand;
     public boolean isNewWorld;
